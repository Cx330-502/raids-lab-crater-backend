// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newResourceNetwork(db *gorm.DB, opts ...gen.DOOption) resourceNetwork {
	_resourceNetwork := resourceNetwork{}

	_resourceNetwork.resourceNetworkDo.UseDB(db, opts...)
	_resourceNetwork.resourceNetworkDo.UseModel(&model.ResourceNetwork{})

	tableName := _resourceNetwork.resourceNetworkDo.TableName()
	_resourceNetwork.ALL = field.NewAsterisk(tableName)
	_resourceNetwork.ID = field.NewUint(tableName, "id")
	_resourceNetwork.CreatedAt = field.NewTime(tableName, "created_at")
	_resourceNetwork.UpdatedAt = field.NewTime(tableName, "updated_at")
	_resourceNetwork.DeletedAt = field.NewField(tableName, "deleted_at")
	_resourceNetwork.ResourceID = field.NewUint(tableName, "resource_id")
	_resourceNetwork.NetworkID = field.NewUint(tableName, "network_id")
	_resourceNetwork.Resource = resourceNetworkBelongsToResource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Resource", "model.Resource"),
		Networks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Resource.Networks", "model.Resource"),
		},
	}

	_resourceNetwork.Network = resourceNetworkBelongsToNetwork{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Network", "model.Resource"),
	}

	_resourceNetwork.fillFieldMap()

	return _resourceNetwork
}

type resourceNetwork struct {
	resourceNetworkDo resourceNetworkDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	ResourceID field.Uint
	NetworkID  field.Uint
	Resource   resourceNetworkBelongsToResource

	Network resourceNetworkBelongsToNetwork

	fieldMap map[string]field.Expr
}

func (r resourceNetwork) Table(newTableName string) *resourceNetwork {
	r.resourceNetworkDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourceNetwork) As(alias string) *resourceNetwork {
	r.resourceNetworkDo.DO = *(r.resourceNetworkDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourceNetwork) updateTableName(table string) *resourceNetwork {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.ResourceID = field.NewUint(table, "resource_id")
	r.NetworkID = field.NewUint(table, "network_id")

	r.fillFieldMap()

	return r
}

func (r *resourceNetwork) WithContext(ctx context.Context) IResourceNetworkDo {
	return r.resourceNetworkDo.WithContext(ctx)
}

func (r resourceNetwork) TableName() string { return r.resourceNetworkDo.TableName() }

func (r resourceNetwork) Alias() string { return r.resourceNetworkDo.Alias() }

func (r resourceNetwork) Columns(cols ...field.Expr) gen.Columns {
	return r.resourceNetworkDo.Columns(cols...)
}

func (r *resourceNetwork) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourceNetwork) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["resource_id"] = r.ResourceID
	r.fieldMap["network_id"] = r.NetworkID

}

func (r resourceNetwork) clone(db *gorm.DB) resourceNetwork {
	r.resourceNetworkDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r resourceNetwork) replaceDB(db *gorm.DB) resourceNetwork {
	r.resourceNetworkDo.ReplaceDB(db)
	return r
}

type resourceNetworkBelongsToResource struct {
	db *gorm.DB

	field.RelationField

	Networks struct {
		field.RelationField
	}
}

func (a resourceNetworkBelongsToResource) Where(conds ...field.Expr) *resourceNetworkBelongsToResource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceNetworkBelongsToResource) WithContext(ctx context.Context) *resourceNetworkBelongsToResource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceNetworkBelongsToResource) Session(session *gorm.Session) *resourceNetworkBelongsToResource {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceNetworkBelongsToResource) Model(m *model.ResourceNetwork) *resourceNetworkBelongsToResourceTx {
	return &resourceNetworkBelongsToResourceTx{a.db.Model(m).Association(a.Name())}
}

type resourceNetworkBelongsToResourceTx struct{ tx *gorm.Association }

func (a resourceNetworkBelongsToResourceTx) Find() (result *model.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceNetworkBelongsToResourceTx) Append(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceNetworkBelongsToResourceTx) Replace(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceNetworkBelongsToResourceTx) Delete(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceNetworkBelongsToResourceTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceNetworkBelongsToResourceTx) Count() int64 {
	return a.tx.Count()
}

type resourceNetworkBelongsToNetwork struct {
	db *gorm.DB

	field.RelationField
}

func (a resourceNetworkBelongsToNetwork) Where(conds ...field.Expr) *resourceNetworkBelongsToNetwork {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceNetworkBelongsToNetwork) WithContext(ctx context.Context) *resourceNetworkBelongsToNetwork {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceNetworkBelongsToNetwork) Session(session *gorm.Session) *resourceNetworkBelongsToNetwork {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceNetworkBelongsToNetwork) Model(m *model.ResourceNetwork) *resourceNetworkBelongsToNetworkTx {
	return &resourceNetworkBelongsToNetworkTx{a.db.Model(m).Association(a.Name())}
}

type resourceNetworkBelongsToNetworkTx struct{ tx *gorm.Association }

func (a resourceNetworkBelongsToNetworkTx) Find() (result *model.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceNetworkBelongsToNetworkTx) Append(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceNetworkBelongsToNetworkTx) Replace(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceNetworkBelongsToNetworkTx) Delete(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceNetworkBelongsToNetworkTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceNetworkBelongsToNetworkTx) Count() int64 {
	return a.tx.Count()
}

type resourceNetworkDo struct{ gen.DO }

type IResourceNetworkDo interface {
	gen.SubQuery
	Debug() IResourceNetworkDo
	WithContext(ctx context.Context) IResourceNetworkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResourceNetworkDo
	WriteDB() IResourceNetworkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResourceNetworkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResourceNetworkDo
	Not(conds ...gen.Condition) IResourceNetworkDo
	Or(conds ...gen.Condition) IResourceNetworkDo
	Select(conds ...field.Expr) IResourceNetworkDo
	Where(conds ...gen.Condition) IResourceNetworkDo
	Order(conds ...field.Expr) IResourceNetworkDo
	Distinct(cols ...field.Expr) IResourceNetworkDo
	Omit(cols ...field.Expr) IResourceNetworkDo
	Join(table schema.Tabler, on ...field.Expr) IResourceNetworkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResourceNetworkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResourceNetworkDo
	Group(cols ...field.Expr) IResourceNetworkDo
	Having(conds ...gen.Condition) IResourceNetworkDo
	Limit(limit int) IResourceNetworkDo
	Offset(offset int) IResourceNetworkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceNetworkDo
	Unscoped() IResourceNetworkDo
	Create(values ...*model.ResourceNetwork) error
	CreateInBatches(values []*model.ResourceNetwork, batchSize int) error
	Save(values ...*model.ResourceNetwork) error
	First() (*model.ResourceNetwork, error)
	Take() (*model.ResourceNetwork, error)
	Last() (*model.ResourceNetwork, error)
	Find() ([]*model.ResourceNetwork, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourceNetwork, err error)
	FindInBatches(result *[]*model.ResourceNetwork, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ResourceNetwork) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResourceNetworkDo
	Assign(attrs ...field.AssignExpr) IResourceNetworkDo
	Joins(fields ...field.RelationField) IResourceNetworkDo
	Preload(fields ...field.RelationField) IResourceNetworkDo
	FirstOrInit() (*model.ResourceNetwork, error)
	FirstOrCreate() (*model.ResourceNetwork, error)
	FindByPage(offset int, limit int) (result []*model.ResourceNetwork, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResourceNetworkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resourceNetworkDo) Debug() IResourceNetworkDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceNetworkDo) WithContext(ctx context.Context) IResourceNetworkDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceNetworkDo) ReadDB() IResourceNetworkDo {
	return r.Clauses(dbresolver.Read)
}

func (r resourceNetworkDo) WriteDB() IResourceNetworkDo {
	return r.Clauses(dbresolver.Write)
}

func (r resourceNetworkDo) Session(config *gorm.Session) IResourceNetworkDo {
	return r.withDO(r.DO.Session(config))
}

func (r resourceNetworkDo) Clauses(conds ...clause.Expression) IResourceNetworkDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceNetworkDo) Returning(value interface{}, columns ...string) IResourceNetworkDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceNetworkDo) Not(conds ...gen.Condition) IResourceNetworkDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceNetworkDo) Or(conds ...gen.Condition) IResourceNetworkDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceNetworkDo) Select(conds ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceNetworkDo) Where(conds ...gen.Condition) IResourceNetworkDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceNetworkDo) Order(conds ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceNetworkDo) Distinct(cols ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceNetworkDo) Omit(cols ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceNetworkDo) Join(table schema.Tabler, on ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceNetworkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceNetworkDo) RightJoin(table schema.Tabler, on ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceNetworkDo) Group(cols ...field.Expr) IResourceNetworkDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceNetworkDo) Having(conds ...gen.Condition) IResourceNetworkDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceNetworkDo) Limit(limit int) IResourceNetworkDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceNetworkDo) Offset(offset int) IResourceNetworkDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceNetworkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceNetworkDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceNetworkDo) Unscoped() IResourceNetworkDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceNetworkDo) Create(values ...*model.ResourceNetwork) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceNetworkDo) CreateInBatches(values []*model.ResourceNetwork, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceNetworkDo) Save(values ...*model.ResourceNetwork) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceNetworkDo) First() (*model.ResourceNetwork, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceNetwork), nil
	}
}

func (r resourceNetworkDo) Take() (*model.ResourceNetwork, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceNetwork), nil
	}
}

func (r resourceNetworkDo) Last() (*model.ResourceNetwork, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceNetwork), nil
	}
}

func (r resourceNetworkDo) Find() ([]*model.ResourceNetwork, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResourceNetwork), err
}

func (r resourceNetworkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourceNetwork, err error) {
	buf := make([]*model.ResourceNetwork, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceNetworkDo) FindInBatches(result *[]*model.ResourceNetwork, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceNetworkDo) Attrs(attrs ...field.AssignExpr) IResourceNetworkDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceNetworkDo) Assign(attrs ...field.AssignExpr) IResourceNetworkDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceNetworkDo) Joins(fields ...field.RelationField) IResourceNetworkDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourceNetworkDo) Preload(fields ...field.RelationField) IResourceNetworkDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourceNetworkDo) FirstOrInit() (*model.ResourceNetwork, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceNetwork), nil
	}
}

func (r resourceNetworkDo) FirstOrCreate() (*model.ResourceNetwork, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourceNetwork), nil
	}
}

func (r resourceNetworkDo) FindByPage(offset int, limit int) (result []*model.ResourceNetwork, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceNetworkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resourceNetworkDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resourceNetworkDo) Delete(models ...*model.ResourceNetwork) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resourceNetworkDo) withDO(do gen.Dao) *resourceNetworkDo {
	r.DO = *do.(*gen.DO)
	return r
}
