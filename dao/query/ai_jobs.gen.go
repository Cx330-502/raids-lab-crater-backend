// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newAIJob(db *gorm.DB, opts ...gen.DOOption) aIJob {
	_aIJob := aIJob{}

	_aIJob.aIJobDo.UseDB(db, opts...)
	_aIJob.aIJobDo.UseModel(&model.AIJob{})

	tableName := _aIJob.aIJobDo.TableName()
	_aIJob.ALL = field.NewAsterisk(tableName)
	_aIJob.ID = field.NewUint(tableName, "id")
	_aIJob.CreatedAt = field.NewTime(tableName, "created_at")
	_aIJob.UpdatedAt = field.NewTime(tableName, "updated_at")
	_aIJob.DeletedAt = field.NewField(tableName, "deleted_at")
	_aIJob.Name = field.NewString(tableName, "name")
	_aIJob.UserID = field.NewUint(tableName, "user_id")
	_aIJob.ProjectID = field.NewUint(tableName, "project_id")
	_aIJob.TaskType = field.NewString(tableName, "task_type")
	_aIJob.AdmittedAt = field.NewTime(tableName, "admitted_at")
	_aIJob.StartedAt = field.NewTime(tableName, "started_at")
	_aIJob.FinishAt = field.NewTime(tableName, "finish_at")
	_aIJob.Status = field.NewUint8(tableName, "status")
	_aIJob.ResourceRequest = field.NewString(tableName, "resource_request")
	_aIJob.Extra = field.NewString(tableName, "extra")
	_aIJob.User = aIJobBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		UserProjects: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserProjects", "model.UserProject"),
		},
		UserQueues: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserQueues", "model.UserQueue"),
		},
	}

	_aIJob.Project = aIJobBelongsToProject{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Project", "model.Project"),
		UserProjects: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Project.UserProjects", "model.UserProject"),
		},
		ProjectSpaces: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Project.ProjectSpaces", "model.ProjectSpace"),
		},
	}

	_aIJob.fillFieldMap()

	return _aIJob
}

type aIJob struct {
	aIJobDo aIJobDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Name            field.String
	UserID          field.Uint
	ProjectID       field.Uint
	TaskType        field.String
	AdmittedAt      field.Time
	StartedAt       field.Time
	FinishAt        field.Time
	Status          field.Uint8
	ResourceRequest field.String
	Extra           field.String
	User            aIJobBelongsToUser

	Project aIJobBelongsToProject

	fieldMap map[string]field.Expr
}

func (a aIJob) Table(newTableName string) *aIJob {
	a.aIJobDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aIJob) As(alias string) *aIJob {
	a.aIJobDo.DO = *(a.aIJobDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aIJob) updateTableName(table string) *aIJob {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Name = field.NewString(table, "name")
	a.UserID = field.NewUint(table, "user_id")
	a.ProjectID = field.NewUint(table, "project_id")
	a.TaskType = field.NewString(table, "task_type")
	a.AdmittedAt = field.NewTime(table, "admitted_at")
	a.StartedAt = field.NewTime(table, "started_at")
	a.FinishAt = field.NewTime(table, "finish_at")
	a.Status = field.NewUint8(table, "status")
	a.ResourceRequest = field.NewString(table, "resource_request")
	a.Extra = field.NewString(table, "extra")

	a.fillFieldMap()

	return a
}

func (a *aIJob) WithContext(ctx context.Context) IAIJobDo { return a.aIJobDo.WithContext(ctx) }

func (a aIJob) TableName() string { return a.aIJobDo.TableName() }

func (a aIJob) Alias() string { return a.aIJobDo.Alias() }

func (a aIJob) Columns(cols ...field.Expr) gen.Columns { return a.aIJobDo.Columns(cols...) }

func (a *aIJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aIJob) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["project_id"] = a.ProjectID
	a.fieldMap["task_type"] = a.TaskType
	a.fieldMap["admitted_at"] = a.AdmittedAt
	a.fieldMap["started_at"] = a.StartedAt
	a.fieldMap["finish_at"] = a.FinishAt
	a.fieldMap["status"] = a.Status
	a.fieldMap["resource_request"] = a.ResourceRequest
	a.fieldMap["extra"] = a.Extra

}

func (a aIJob) clone(db *gorm.DB) aIJob {
	a.aIJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aIJob) replaceDB(db *gorm.DB) aIJob {
	a.aIJobDo.ReplaceDB(db)
	return a
}

type aIJobBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserProjects struct {
		field.RelationField
	}
	UserQueues struct {
		field.RelationField
	}
}

func (a aIJobBelongsToUser) Where(conds ...field.Expr) *aIJobBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIJobBelongsToUser) WithContext(ctx context.Context) *aIJobBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIJobBelongsToUser) Session(session *gorm.Session) *aIJobBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a aIJobBelongsToUser) Model(m *model.AIJob) *aIJobBelongsToUserTx {
	return &aIJobBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type aIJobBelongsToUserTx struct{ tx *gorm.Association }

func (a aIJobBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a aIJobBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIJobBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIJobBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIJobBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a aIJobBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type aIJobBelongsToProject struct {
	db *gorm.DB

	field.RelationField

	UserProjects struct {
		field.RelationField
	}
	ProjectSpaces struct {
		field.RelationField
	}
}

func (a aIJobBelongsToProject) Where(conds ...field.Expr) *aIJobBelongsToProject {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aIJobBelongsToProject) WithContext(ctx context.Context) *aIJobBelongsToProject {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aIJobBelongsToProject) Session(session *gorm.Session) *aIJobBelongsToProject {
	a.db = a.db.Session(session)
	return &a
}

func (a aIJobBelongsToProject) Model(m *model.AIJob) *aIJobBelongsToProjectTx {
	return &aIJobBelongsToProjectTx{a.db.Model(m).Association(a.Name())}
}

type aIJobBelongsToProjectTx struct{ tx *gorm.Association }

func (a aIJobBelongsToProjectTx) Find() (result *model.Project, err error) {
	return result, a.tx.Find(&result)
}

func (a aIJobBelongsToProjectTx) Append(values ...*model.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aIJobBelongsToProjectTx) Replace(values ...*model.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aIJobBelongsToProjectTx) Delete(values ...*model.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aIJobBelongsToProjectTx) Clear() error {
	return a.tx.Clear()
}

func (a aIJobBelongsToProjectTx) Count() int64 {
	return a.tx.Count()
}

type aIJobDo struct{ gen.DO }

type IAIJobDo interface {
	gen.SubQuery
	Debug() IAIJobDo
	WithContext(ctx context.Context) IAIJobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAIJobDo
	WriteDB() IAIJobDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAIJobDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAIJobDo
	Not(conds ...gen.Condition) IAIJobDo
	Or(conds ...gen.Condition) IAIJobDo
	Select(conds ...field.Expr) IAIJobDo
	Where(conds ...gen.Condition) IAIJobDo
	Order(conds ...field.Expr) IAIJobDo
	Distinct(cols ...field.Expr) IAIJobDo
	Omit(cols ...field.Expr) IAIJobDo
	Join(table schema.Tabler, on ...field.Expr) IAIJobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAIJobDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAIJobDo
	Group(cols ...field.Expr) IAIJobDo
	Having(conds ...gen.Condition) IAIJobDo
	Limit(limit int) IAIJobDo
	Offset(offset int) IAIJobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAIJobDo
	Unscoped() IAIJobDo
	Create(values ...*model.AIJob) error
	CreateInBatches(values []*model.AIJob, batchSize int) error
	Save(values ...*model.AIJob) error
	First() (*model.AIJob, error)
	Take() (*model.AIJob, error)
	Last() (*model.AIJob, error)
	Find() ([]*model.AIJob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AIJob, err error)
	FindInBatches(result *[]*model.AIJob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AIJob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAIJobDo
	Assign(attrs ...field.AssignExpr) IAIJobDo
	Joins(fields ...field.RelationField) IAIJobDo
	Preload(fields ...field.RelationField) IAIJobDo
	FirstOrInit() (*model.AIJob, error)
	FirstOrCreate() (*model.AIJob, error)
	FindByPage(offset int, limit int) (result []*model.AIJob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAIJobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aIJobDo) Debug() IAIJobDo {
	return a.withDO(a.DO.Debug())
}

func (a aIJobDo) WithContext(ctx context.Context) IAIJobDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aIJobDo) ReadDB() IAIJobDo {
	return a.Clauses(dbresolver.Read)
}

func (a aIJobDo) WriteDB() IAIJobDo {
	return a.Clauses(dbresolver.Write)
}

func (a aIJobDo) Session(config *gorm.Session) IAIJobDo {
	return a.withDO(a.DO.Session(config))
}

func (a aIJobDo) Clauses(conds ...clause.Expression) IAIJobDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aIJobDo) Returning(value interface{}, columns ...string) IAIJobDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aIJobDo) Not(conds ...gen.Condition) IAIJobDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aIJobDo) Or(conds ...gen.Condition) IAIJobDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aIJobDo) Select(conds ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aIJobDo) Where(conds ...gen.Condition) IAIJobDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aIJobDo) Order(conds ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aIJobDo) Distinct(cols ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aIJobDo) Omit(cols ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aIJobDo) Join(table schema.Tabler, on ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aIJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aIJobDo) RightJoin(table schema.Tabler, on ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aIJobDo) Group(cols ...field.Expr) IAIJobDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aIJobDo) Having(conds ...gen.Condition) IAIJobDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aIJobDo) Limit(limit int) IAIJobDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aIJobDo) Offset(offset int) IAIJobDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aIJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAIJobDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aIJobDo) Unscoped() IAIJobDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aIJobDo) Create(values ...*model.AIJob) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aIJobDo) CreateInBatches(values []*model.AIJob, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aIJobDo) Save(values ...*model.AIJob) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aIJobDo) First() (*model.AIJob, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJob), nil
	}
}

func (a aIJobDo) Take() (*model.AIJob, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJob), nil
	}
}

func (a aIJobDo) Last() (*model.AIJob, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJob), nil
	}
}

func (a aIJobDo) Find() ([]*model.AIJob, error) {
	result, err := a.DO.Find()
	return result.([]*model.AIJob), err
}

func (a aIJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AIJob, err error) {
	buf := make([]*model.AIJob, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aIJobDo) FindInBatches(result *[]*model.AIJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aIJobDo) Attrs(attrs ...field.AssignExpr) IAIJobDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aIJobDo) Assign(attrs ...field.AssignExpr) IAIJobDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aIJobDo) Joins(fields ...field.RelationField) IAIJobDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aIJobDo) Preload(fields ...field.RelationField) IAIJobDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aIJobDo) FirstOrInit() (*model.AIJob, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJob), nil
	}
}

func (a aIJobDo) FirstOrCreate() (*model.AIJob, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AIJob), nil
	}
}

func (a aIJobDo) FindByPage(offset int, limit int) (result []*model.AIJob, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aIJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aIJobDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aIJobDo) Delete(models ...*model.AIJob) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aIJobDo) withDO(do gen.Dao) *aIJobDo {
	a.DO = *do.(*gen.DO)
	return a
}
