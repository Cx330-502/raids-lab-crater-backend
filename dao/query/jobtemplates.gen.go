// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newJobtemplate(db *gorm.DB, opts ...gen.DOOption) jobtemplate {
	_jobtemplate := jobtemplate{}

	_jobtemplate.jobtemplateDo.UseDB(db, opts...)
	_jobtemplate.jobtemplateDo.UseModel(&model.Jobtemplate{})

	tableName := _jobtemplate.jobtemplateDo.TableName()
	_jobtemplate.ALL = field.NewAsterisk(tableName)
	_jobtemplate.ID = field.NewUint(tableName, "id")
	_jobtemplate.CreatedAt = field.NewTime(tableName, "created_at")
	_jobtemplate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_jobtemplate.DeletedAt = field.NewField(tableName, "deleted_at")
	_jobtemplate.Name = field.NewString(tableName, "name")
	_jobtemplate.Describe = field.NewString(tableName, "describe")
	_jobtemplate.Document = field.NewString(tableName, "document")
	_jobtemplate.Template = field.NewString(tableName, "template")
	_jobtemplate.UserID = field.NewUint(tableName, "user_id")
	_jobtemplate.User = jobtemplateBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		UserAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserAccounts", "model.UserAccount"),
		},
		UserDatasets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserDatasets", "model.UserDataset"),
		},
	}

	_jobtemplate.fillFieldMap()

	return _jobtemplate
}

type jobtemplate struct {
	jobtemplateDo jobtemplateDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String // 作业模板名称
	Describe  field.String // 作业模板的描述
	Document  field.String // 作业模板的文档
	Template  field.String // 作业的模板配置
	UserID    field.Uint
	User      jobtemplateBelongsToUser

	fieldMap map[string]field.Expr
}

func (j jobtemplate) Table(newTableName string) *jobtemplate {
	j.jobtemplateDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobtemplate) As(alias string) *jobtemplate {
	j.jobtemplateDo.DO = *(j.jobtemplateDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobtemplate) updateTableName(table string) *jobtemplate {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewUint(table, "id")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")
	j.DeletedAt = field.NewField(table, "deleted_at")
	j.Name = field.NewString(table, "name")
	j.Describe = field.NewString(table, "describe")
	j.Document = field.NewString(table, "document")
	j.Template = field.NewString(table, "template")
	j.UserID = field.NewUint(table, "user_id")

	j.fillFieldMap()

	return j
}

func (j *jobtemplate) WithContext(ctx context.Context) IJobtemplateDo {
	return j.jobtemplateDo.WithContext(ctx)
}

func (j jobtemplate) TableName() string { return j.jobtemplateDo.TableName() }

func (j jobtemplate) Alias() string { return j.jobtemplateDo.Alias() }

func (j jobtemplate) Columns(cols ...field.Expr) gen.Columns { return j.jobtemplateDo.Columns(cols...) }

func (j *jobtemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobtemplate) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 10)
	j.fieldMap["id"] = j.ID
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
	j.fieldMap["deleted_at"] = j.DeletedAt
	j.fieldMap["name"] = j.Name
	j.fieldMap["describe"] = j.Describe
	j.fieldMap["document"] = j.Document
	j.fieldMap["template"] = j.Template
	j.fieldMap["user_id"] = j.UserID

}

func (j jobtemplate) clone(db *gorm.DB) jobtemplate {
	j.jobtemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	j.User.db = db.Session(&gorm.Session{Initialized: true})
	j.User.db.Statement.ConnPool = db.Statement.ConnPool
	return j
}

func (j jobtemplate) replaceDB(db *gorm.DB) jobtemplate {
	j.jobtemplateDo.ReplaceDB(db)
	j.User.db = db.Session(&gorm.Session{})
	return j
}

type jobtemplateBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserAccounts struct {
		field.RelationField
	}
	UserDatasets struct {
		field.RelationField
	}
}

func (a jobtemplateBelongsToUser) Where(conds ...field.Expr) *jobtemplateBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a jobtemplateBelongsToUser) WithContext(ctx context.Context) *jobtemplateBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a jobtemplateBelongsToUser) Session(session *gorm.Session) *jobtemplateBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a jobtemplateBelongsToUser) Model(m *model.Jobtemplate) *jobtemplateBelongsToUserTx {
	return &jobtemplateBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a jobtemplateBelongsToUser) Unscoped() *jobtemplateBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type jobtemplateBelongsToUserTx struct{ tx *gorm.Association }

func (a jobtemplateBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a jobtemplateBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a jobtemplateBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a jobtemplateBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a jobtemplateBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a jobtemplateBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a jobtemplateBelongsToUserTx) Unscoped() *jobtemplateBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type jobtemplateDo struct{ gen.DO }

type IJobtemplateDo interface {
	gen.SubQuery
	Debug() IJobtemplateDo
	WithContext(ctx context.Context) IJobtemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobtemplateDo
	WriteDB() IJobtemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobtemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobtemplateDo
	Not(conds ...gen.Condition) IJobtemplateDo
	Or(conds ...gen.Condition) IJobtemplateDo
	Select(conds ...field.Expr) IJobtemplateDo
	Where(conds ...gen.Condition) IJobtemplateDo
	Order(conds ...field.Expr) IJobtemplateDo
	Distinct(cols ...field.Expr) IJobtemplateDo
	Omit(cols ...field.Expr) IJobtemplateDo
	Join(table schema.Tabler, on ...field.Expr) IJobtemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobtemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobtemplateDo
	Group(cols ...field.Expr) IJobtemplateDo
	Having(conds ...gen.Condition) IJobtemplateDo
	Limit(limit int) IJobtemplateDo
	Offset(offset int) IJobtemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobtemplateDo
	Unscoped() IJobtemplateDo
	Create(values ...*model.Jobtemplate) error
	CreateInBatches(values []*model.Jobtemplate, batchSize int) error
	Save(values ...*model.Jobtemplate) error
	First() (*model.Jobtemplate, error)
	Take() (*model.Jobtemplate, error)
	Last() (*model.Jobtemplate, error)
	Find() ([]*model.Jobtemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Jobtemplate, err error)
	FindInBatches(result *[]*model.Jobtemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Jobtemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobtemplateDo
	Assign(attrs ...field.AssignExpr) IJobtemplateDo
	Joins(fields ...field.RelationField) IJobtemplateDo
	Preload(fields ...field.RelationField) IJobtemplateDo
	FirstOrInit() (*model.Jobtemplate, error)
	FirstOrCreate() (*model.Jobtemplate, error)
	FindByPage(offset int, limit int) (result []*model.Jobtemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobtemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobtemplateDo) Debug() IJobtemplateDo {
	return j.withDO(j.DO.Debug())
}

func (j jobtemplateDo) WithContext(ctx context.Context) IJobtemplateDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobtemplateDo) ReadDB() IJobtemplateDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobtemplateDo) WriteDB() IJobtemplateDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobtemplateDo) Session(config *gorm.Session) IJobtemplateDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobtemplateDo) Clauses(conds ...clause.Expression) IJobtemplateDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobtemplateDo) Returning(value interface{}, columns ...string) IJobtemplateDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobtemplateDo) Not(conds ...gen.Condition) IJobtemplateDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobtemplateDo) Or(conds ...gen.Condition) IJobtemplateDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobtemplateDo) Select(conds ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobtemplateDo) Where(conds ...gen.Condition) IJobtemplateDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobtemplateDo) Order(conds ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobtemplateDo) Distinct(cols ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobtemplateDo) Omit(cols ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobtemplateDo) Join(table schema.Tabler, on ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobtemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobtemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobtemplateDo) Group(cols ...field.Expr) IJobtemplateDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobtemplateDo) Having(conds ...gen.Condition) IJobtemplateDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobtemplateDo) Limit(limit int) IJobtemplateDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobtemplateDo) Offset(offset int) IJobtemplateDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobtemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobtemplateDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobtemplateDo) Unscoped() IJobtemplateDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobtemplateDo) Create(values ...*model.Jobtemplate) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobtemplateDo) CreateInBatches(values []*model.Jobtemplate, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobtemplateDo) Save(values ...*model.Jobtemplate) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobtemplateDo) First() (*model.Jobtemplate, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Jobtemplate), nil
	}
}

func (j jobtemplateDo) Take() (*model.Jobtemplate, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Jobtemplate), nil
	}
}

func (j jobtemplateDo) Last() (*model.Jobtemplate, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Jobtemplate), nil
	}
}

func (j jobtemplateDo) Find() ([]*model.Jobtemplate, error) {
	result, err := j.DO.Find()
	return result.([]*model.Jobtemplate), err
}

func (j jobtemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Jobtemplate, err error) {
	buf := make([]*model.Jobtemplate, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobtemplateDo) FindInBatches(result *[]*model.Jobtemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobtemplateDo) Attrs(attrs ...field.AssignExpr) IJobtemplateDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobtemplateDo) Assign(attrs ...field.AssignExpr) IJobtemplateDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobtemplateDo) Joins(fields ...field.RelationField) IJobtemplateDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobtemplateDo) Preload(fields ...field.RelationField) IJobtemplateDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobtemplateDo) FirstOrInit() (*model.Jobtemplate, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Jobtemplate), nil
	}
}

func (j jobtemplateDo) FirstOrCreate() (*model.Jobtemplate, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Jobtemplate), nil
	}
}

func (j jobtemplateDo) FindByPage(offset int, limit int) (result []*model.Jobtemplate, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobtemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobtemplateDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobtemplateDo) Delete(models ...*model.Jobtemplate) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobtemplateDo) withDO(do gen.Dao) *jobtemplateDo {
	j.DO = *do.(*gen.DO)
	return j
}
