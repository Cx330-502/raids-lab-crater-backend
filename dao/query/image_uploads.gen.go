// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newImageUpload(db *gorm.DB, opts ...gen.DOOption) imageUpload {
	_imageUpload := imageUpload{}

	_imageUpload.imageUploadDo.UseDB(db, opts...)
	_imageUpload.imageUploadDo.UseModel(&model.ImageUpload{})

	tableName := _imageUpload.imageUploadDo.TableName()
	_imageUpload.ALL = field.NewAsterisk(tableName)
	_imageUpload.ID = field.NewUint(tableName, "id")
	_imageUpload.CreatedAt = field.NewTime(tableName, "created_at")
	_imageUpload.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imageUpload.DeletedAt = field.NewField(tableName, "deleted_at")
	_imageUpload.UserID = field.NewUint(tableName, "user_id")
	_imageUpload.QueueID = field.NewUint(tableName, "queue_id")
	_imageUpload.ImageLink = field.NewString(tableName, "imagelink")
	_imageUpload.Status = field.NewString(tableName, "status")
	_imageUpload.NameTag = field.NewString(tableName, "nametag")
	_imageUpload.TaskType = field.NewUint8(tableName, "tasktype")
	_imageUpload.Alias_ = field.NewString(tableName, "alias")
	_imageUpload.Description = field.NewString(tableName, "description")
	_imageUpload.CreatorName = field.NewString(tableName, "creatorname")
	_imageUpload.User = imageUploadBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		UserProjects: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserProjects", "model.UserProject"),
		},
		UserQueues: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserQueues", "model.UserQueue"),
		},
		UserDatasets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserDatasets", "model.UserDataset"),
		},
	}

	_imageUpload.Queue = imageUploadBelongsToQueue{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Queue", "model.Queue"),
		UserQueues: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Queue.UserQueues", "model.UserQueue"),
		},
		QueueDatasets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Queue.QueueDatasets", "model.QueueDataset"),
		},
	}

	_imageUpload.fillFieldMap()

	return _imageUpload
}

type imageUpload struct {
	imageUploadDo imageUploadDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	UserID      field.Uint
	QueueID     field.Uint
	ImageLink   field.String
	Status      field.String
	NameTag     field.String
	TaskType    field.Uint8
	Alias_      field.String
	Description field.String
	CreatorName field.String
	User        imageUploadBelongsToUser

	Queue imageUploadBelongsToQueue

	fieldMap map[string]field.Expr
}

func (i imageUpload) Table(newTableName string) *imageUpload {
	i.imageUploadDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imageUpload) As(alias string) *imageUpload {
	i.imageUploadDo.DO = *(i.imageUploadDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imageUpload) updateTableName(table string) *imageUpload {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.UserID = field.NewUint(table, "user_id")
	i.QueueID = field.NewUint(table, "queue_id")
	i.ImageLink = field.NewString(table, "imagelink")
	i.Status = field.NewString(table, "status")
	i.NameTag = field.NewString(table, "nametag")
	i.TaskType = field.NewUint8(table, "tasktype")
	i.Alias_ = field.NewString(table, "alias")
	i.Description = field.NewString(table, "description")
	i.CreatorName = field.NewString(table, "creatorname")

	i.fillFieldMap()

	return i
}

func (i *imageUpload) WithContext(ctx context.Context) IImageUploadDo {
	return i.imageUploadDo.WithContext(ctx)
}

func (i imageUpload) TableName() string { return i.imageUploadDo.TableName() }

func (i imageUpload) Alias() string { return i.imageUploadDo.Alias() }

func (i imageUpload) Columns(cols ...field.Expr) gen.Columns { return i.imageUploadDo.Columns(cols...) }

func (i *imageUpload) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imageUpload) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 15)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["queue_id"] = i.QueueID
	i.fieldMap["imagelink"] = i.ImageLink
	i.fieldMap["status"] = i.Status
	i.fieldMap["nametag"] = i.NameTag
	i.fieldMap["tasktype"] = i.TaskType
	i.fieldMap["alias"] = i.Alias_
	i.fieldMap["description"] = i.Description
	i.fieldMap["creatorname"] = i.CreatorName

}

func (i imageUpload) clone(db *gorm.DB) imageUpload {
	i.imageUploadDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imageUpload) replaceDB(db *gorm.DB) imageUpload {
	i.imageUploadDo.ReplaceDB(db)
	return i
}

type imageUploadBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserProjects struct {
		field.RelationField
	}
	UserQueues struct {
		field.RelationField
	}
	UserDatasets struct {
		field.RelationField
	}
}

func (a imageUploadBelongsToUser) Where(conds ...field.Expr) *imageUploadBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a imageUploadBelongsToUser) WithContext(ctx context.Context) *imageUploadBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a imageUploadBelongsToUser) Session(session *gorm.Session) *imageUploadBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a imageUploadBelongsToUser) Model(m *model.ImageUpload) *imageUploadBelongsToUserTx {
	return &imageUploadBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type imageUploadBelongsToUserTx struct{ tx *gorm.Association }

func (a imageUploadBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a imageUploadBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a imageUploadBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a imageUploadBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a imageUploadBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a imageUploadBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type imageUploadBelongsToQueue struct {
	db *gorm.DB

	field.RelationField

	UserQueues struct {
		field.RelationField
	}
	QueueDatasets struct {
		field.RelationField
	}
}

func (a imageUploadBelongsToQueue) Where(conds ...field.Expr) *imageUploadBelongsToQueue {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a imageUploadBelongsToQueue) WithContext(ctx context.Context) *imageUploadBelongsToQueue {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a imageUploadBelongsToQueue) Session(session *gorm.Session) *imageUploadBelongsToQueue {
	a.db = a.db.Session(session)
	return &a
}

func (a imageUploadBelongsToQueue) Model(m *model.ImageUpload) *imageUploadBelongsToQueueTx {
	return &imageUploadBelongsToQueueTx{a.db.Model(m).Association(a.Name())}
}

type imageUploadBelongsToQueueTx struct{ tx *gorm.Association }

func (a imageUploadBelongsToQueueTx) Find() (result *model.Queue, err error) {
	return result, a.tx.Find(&result)
}

func (a imageUploadBelongsToQueueTx) Append(values ...*model.Queue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a imageUploadBelongsToQueueTx) Replace(values ...*model.Queue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a imageUploadBelongsToQueueTx) Delete(values ...*model.Queue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a imageUploadBelongsToQueueTx) Clear() error {
	return a.tx.Clear()
}

func (a imageUploadBelongsToQueueTx) Count() int64 {
	return a.tx.Count()
}

type imageUploadDo struct{ gen.DO }

type IImageUploadDo interface {
	gen.SubQuery
	Debug() IImageUploadDo
	WithContext(ctx context.Context) IImageUploadDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IImageUploadDo
	WriteDB() IImageUploadDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IImageUploadDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IImageUploadDo
	Not(conds ...gen.Condition) IImageUploadDo
	Or(conds ...gen.Condition) IImageUploadDo
	Select(conds ...field.Expr) IImageUploadDo
	Where(conds ...gen.Condition) IImageUploadDo
	Order(conds ...field.Expr) IImageUploadDo
	Distinct(cols ...field.Expr) IImageUploadDo
	Omit(cols ...field.Expr) IImageUploadDo
	Join(table schema.Tabler, on ...field.Expr) IImageUploadDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IImageUploadDo
	RightJoin(table schema.Tabler, on ...field.Expr) IImageUploadDo
	Group(cols ...field.Expr) IImageUploadDo
	Having(conds ...gen.Condition) IImageUploadDo
	Limit(limit int) IImageUploadDo
	Offset(offset int) IImageUploadDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IImageUploadDo
	Unscoped() IImageUploadDo
	Create(values ...*model.ImageUpload) error
	CreateInBatches(values []*model.ImageUpload, batchSize int) error
	Save(values ...*model.ImageUpload) error
	First() (*model.ImageUpload, error)
	Take() (*model.ImageUpload, error)
	Last() (*model.ImageUpload, error)
	Find() ([]*model.ImageUpload, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImageUpload, err error)
	FindInBatches(result *[]*model.ImageUpload, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ImageUpload) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IImageUploadDo
	Assign(attrs ...field.AssignExpr) IImageUploadDo
	Joins(fields ...field.RelationField) IImageUploadDo
	Preload(fields ...field.RelationField) IImageUploadDo
	FirstOrInit() (*model.ImageUpload, error)
	FirstOrCreate() (*model.ImageUpload, error)
	FindByPage(offset int, limit int) (result []*model.ImageUpload, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IImageUploadDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i imageUploadDo) Debug() IImageUploadDo {
	return i.withDO(i.DO.Debug())
}

func (i imageUploadDo) WithContext(ctx context.Context) IImageUploadDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imageUploadDo) ReadDB() IImageUploadDo {
	return i.Clauses(dbresolver.Read)
}

func (i imageUploadDo) WriteDB() IImageUploadDo {
	return i.Clauses(dbresolver.Write)
}

func (i imageUploadDo) Session(config *gorm.Session) IImageUploadDo {
	return i.withDO(i.DO.Session(config))
}

func (i imageUploadDo) Clauses(conds ...clause.Expression) IImageUploadDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imageUploadDo) Returning(value interface{}, columns ...string) IImageUploadDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imageUploadDo) Not(conds ...gen.Condition) IImageUploadDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imageUploadDo) Or(conds ...gen.Condition) IImageUploadDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imageUploadDo) Select(conds ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imageUploadDo) Where(conds ...gen.Condition) IImageUploadDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imageUploadDo) Order(conds ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imageUploadDo) Distinct(cols ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imageUploadDo) Omit(cols ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imageUploadDo) Join(table schema.Tabler, on ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imageUploadDo) LeftJoin(table schema.Tabler, on ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imageUploadDo) RightJoin(table schema.Tabler, on ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imageUploadDo) Group(cols ...field.Expr) IImageUploadDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imageUploadDo) Having(conds ...gen.Condition) IImageUploadDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imageUploadDo) Limit(limit int) IImageUploadDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imageUploadDo) Offset(offset int) IImageUploadDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imageUploadDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IImageUploadDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imageUploadDo) Unscoped() IImageUploadDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imageUploadDo) Create(values ...*model.ImageUpload) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imageUploadDo) CreateInBatches(values []*model.ImageUpload, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imageUploadDo) Save(values ...*model.ImageUpload) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imageUploadDo) First() (*model.ImageUpload, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUpload), nil
	}
}

func (i imageUploadDo) Take() (*model.ImageUpload, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUpload), nil
	}
}

func (i imageUploadDo) Last() (*model.ImageUpload, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUpload), nil
	}
}

func (i imageUploadDo) Find() ([]*model.ImageUpload, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImageUpload), err
}

func (i imageUploadDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImageUpload, err error) {
	buf := make([]*model.ImageUpload, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imageUploadDo) FindInBatches(result *[]*model.ImageUpload, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imageUploadDo) Attrs(attrs ...field.AssignExpr) IImageUploadDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imageUploadDo) Assign(attrs ...field.AssignExpr) IImageUploadDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imageUploadDo) Joins(fields ...field.RelationField) IImageUploadDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imageUploadDo) Preload(fields ...field.RelationField) IImageUploadDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imageUploadDo) FirstOrInit() (*model.ImageUpload, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUpload), nil
	}
}

func (i imageUploadDo) FirstOrCreate() (*model.ImageUpload, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUpload), nil
	}
}

func (i imageUploadDo) FindByPage(offset int, limit int) (result []*model.ImageUpload, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imageUploadDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imageUploadDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imageUploadDo) Delete(models ...*model.ImageUpload) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imageUploadDo) withDO(do gen.Dao) *imageUploadDo {
	i.DO = *do.(*gen.DO)
	return i
}
