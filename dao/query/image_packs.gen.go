// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newImagePack(db *gorm.DB, opts ...gen.DOOption) imagePack {
	_imagePack := imagePack{}

	_imagePack.imagePackDo.UseDB(db, opts...)
	_imagePack.imagePackDo.UseModel(&model.ImagePack{})

	tableName := _imagePack.imagePackDo.TableName()
	_imagePack.ALL = field.NewAsterisk(tableName)
	_imagePack.ID = field.NewUint(tableName, "id")
	_imagePack.CreatedAt = field.NewTime(tableName, "created_at")
	_imagePack.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imagePack.DeletedAt = field.NewField(tableName, "deleted_at")
	_imagePack.UserID = field.NewUint(tableName, "user_id")
	_imagePack.AccountID = field.NewUint(tableName, "account_id")
	_imagePack.ImagePackName = field.NewString(tableName, "imagepackname")
	_imagePack.ImageLink = field.NewString(tableName, "imagelink")
	_imagePack.NameSpace = field.NewString(tableName, "namespace")
	_imagePack.Status = field.NewString(tableName, "status")
	_imagePack.NameTag = field.NewString(tableName, "nametag")
	_imagePack.Params = field.NewField(tableName, "params")
	_imagePack.NeedProfile = field.NewBool(tableName, "needprofile")
	_imagePack.TaskType = field.NewUint8(tableName, "tasktype")
	_imagePack.Alias_ = field.NewString(tableName, "alias")
	_imagePack.Description = field.NewString(tableName, "description")
	_imagePack.CreatorName = field.NewString(tableName, "creatorname")
	_imagePack.IsPublic = field.NewBool(tableName, "ispublic")
	_imagePack.Size = field.NewInt64(tableName, "size")
	_imagePack.User = imagePackBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		UserAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserAccounts", "model.UserAccount"),
		},
		UserDatasets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.UserDatasets", "model.UserDataset"),
		},
	}

	_imagePack.Account = imagePackBelongsToAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "model.Account"),
		UserAccounts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.UserAccounts", "model.UserAccount"),
		},
		AccountDatasets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Account.AccountDatasets", "model.AccountDataset"),
		},
	}

	_imagePack.fillFieldMap()

	return _imagePack
}

type imagePack struct {
	imagePackDo imagePackDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	UserID        field.Uint
	AccountID     field.Uint
	ImagePackName field.String
	ImageLink     field.String
	NameSpace     field.String
	Status        field.String
	NameTag       field.String
	Params        field.Field
	NeedProfile   field.Bool
	TaskType      field.Uint8
	Alias_        field.String
	Description   field.String
	CreatorName   field.String
	IsPublic      field.Bool
	Size          field.Int64
	User          imagePackBelongsToUser

	Account imagePackBelongsToAccount

	fieldMap map[string]field.Expr
}

func (i imagePack) Table(newTableName string) *imagePack {
	i.imagePackDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imagePack) As(alias string) *imagePack {
	i.imagePackDo.DO = *(i.imagePackDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imagePack) updateTableName(table string) *imagePack {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.UserID = field.NewUint(table, "user_id")
	i.AccountID = field.NewUint(table, "account_id")
	i.ImagePackName = field.NewString(table, "imagepackname")
	i.ImageLink = field.NewString(table, "imagelink")
	i.NameSpace = field.NewString(table, "namespace")
	i.Status = field.NewString(table, "status")
	i.NameTag = field.NewString(table, "nametag")
	i.Params = field.NewField(table, "params")
	i.NeedProfile = field.NewBool(table, "needprofile")
	i.TaskType = field.NewUint8(table, "tasktype")
	i.Alias_ = field.NewString(table, "alias")
	i.Description = field.NewString(table, "description")
	i.CreatorName = field.NewString(table, "creatorname")
	i.IsPublic = field.NewBool(table, "ispublic")
	i.Size = field.NewInt64(table, "size")

	i.fillFieldMap()

	return i
}

func (i *imagePack) WithContext(ctx context.Context) IImagePackDo {
	return i.imagePackDo.WithContext(ctx)
}

func (i imagePack) TableName() string { return i.imagePackDo.TableName() }

func (i imagePack) Alias() string { return i.imagePackDo.Alias() }

func (i imagePack) Columns(cols ...field.Expr) gen.Columns { return i.imagePackDo.Columns(cols...) }

func (i *imagePack) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imagePack) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 21)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["account_id"] = i.AccountID
	i.fieldMap["imagepackname"] = i.ImagePackName
	i.fieldMap["imagelink"] = i.ImageLink
	i.fieldMap["namespace"] = i.NameSpace
	i.fieldMap["status"] = i.Status
	i.fieldMap["nametag"] = i.NameTag
	i.fieldMap["params"] = i.Params
	i.fieldMap["needprofile"] = i.NeedProfile
	i.fieldMap["tasktype"] = i.TaskType
	i.fieldMap["alias"] = i.Alias_
	i.fieldMap["description"] = i.Description
	i.fieldMap["creatorname"] = i.CreatorName
	i.fieldMap["ispublic"] = i.IsPublic
	i.fieldMap["size"] = i.Size

}

func (i imagePack) clone(db *gorm.DB) imagePack {
	i.imagePackDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imagePack) replaceDB(db *gorm.DB) imagePack {
	i.imagePackDo.ReplaceDB(db)
	return i
}

type imagePackBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	UserAccounts struct {
		field.RelationField
	}
	UserDatasets struct {
		field.RelationField
	}
}

func (a imagePackBelongsToUser) Where(conds ...field.Expr) *imagePackBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a imagePackBelongsToUser) WithContext(ctx context.Context) *imagePackBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a imagePackBelongsToUser) Session(session *gorm.Session) *imagePackBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a imagePackBelongsToUser) Model(m *model.ImagePack) *imagePackBelongsToUserTx {
	return &imagePackBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type imagePackBelongsToUserTx struct{ tx *gorm.Association }

func (a imagePackBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a imagePackBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a imagePackBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a imagePackBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a imagePackBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a imagePackBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type imagePackBelongsToAccount struct {
	db *gorm.DB

	field.RelationField

	UserAccounts struct {
		field.RelationField
	}
	AccountDatasets struct {
		field.RelationField
	}
}

func (a imagePackBelongsToAccount) Where(conds ...field.Expr) *imagePackBelongsToAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a imagePackBelongsToAccount) WithContext(ctx context.Context) *imagePackBelongsToAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a imagePackBelongsToAccount) Session(session *gorm.Session) *imagePackBelongsToAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a imagePackBelongsToAccount) Model(m *model.ImagePack) *imagePackBelongsToAccountTx {
	return &imagePackBelongsToAccountTx{a.db.Model(m).Association(a.Name())}
}

type imagePackBelongsToAccountTx struct{ tx *gorm.Association }

func (a imagePackBelongsToAccountTx) Find() (result *model.Account, err error) {
	return result, a.tx.Find(&result)
}

func (a imagePackBelongsToAccountTx) Append(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a imagePackBelongsToAccountTx) Replace(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a imagePackBelongsToAccountTx) Delete(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a imagePackBelongsToAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a imagePackBelongsToAccountTx) Count() int64 {
	return a.tx.Count()
}

type imagePackDo struct{ gen.DO }

type IImagePackDo interface {
	gen.SubQuery
	Debug() IImagePackDo
	WithContext(ctx context.Context) IImagePackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IImagePackDo
	WriteDB() IImagePackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IImagePackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IImagePackDo
	Not(conds ...gen.Condition) IImagePackDo
	Or(conds ...gen.Condition) IImagePackDo
	Select(conds ...field.Expr) IImagePackDo
	Where(conds ...gen.Condition) IImagePackDo
	Order(conds ...field.Expr) IImagePackDo
	Distinct(cols ...field.Expr) IImagePackDo
	Omit(cols ...field.Expr) IImagePackDo
	Join(table schema.Tabler, on ...field.Expr) IImagePackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IImagePackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IImagePackDo
	Group(cols ...field.Expr) IImagePackDo
	Having(conds ...gen.Condition) IImagePackDo
	Limit(limit int) IImagePackDo
	Offset(offset int) IImagePackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IImagePackDo
	Unscoped() IImagePackDo
	Create(values ...*model.ImagePack) error
	CreateInBatches(values []*model.ImagePack, batchSize int) error
	Save(values ...*model.ImagePack) error
	First() (*model.ImagePack, error)
	Take() (*model.ImagePack, error)
	Last() (*model.ImagePack, error)
	Find() ([]*model.ImagePack, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImagePack, err error)
	FindInBatches(result *[]*model.ImagePack, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ImagePack) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IImagePackDo
	Assign(attrs ...field.AssignExpr) IImagePackDo
	Joins(fields ...field.RelationField) IImagePackDo
	Preload(fields ...field.RelationField) IImagePackDo
	FirstOrInit() (*model.ImagePack, error)
	FirstOrCreate() (*model.ImagePack, error)
	FindByPage(offset int, limit int) (result []*model.ImagePack, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IImagePackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i imagePackDo) Debug() IImagePackDo {
	return i.withDO(i.DO.Debug())
}

func (i imagePackDo) WithContext(ctx context.Context) IImagePackDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imagePackDo) ReadDB() IImagePackDo {
	return i.Clauses(dbresolver.Read)
}

func (i imagePackDo) WriteDB() IImagePackDo {
	return i.Clauses(dbresolver.Write)
}

func (i imagePackDo) Session(config *gorm.Session) IImagePackDo {
	return i.withDO(i.DO.Session(config))
}

func (i imagePackDo) Clauses(conds ...clause.Expression) IImagePackDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imagePackDo) Returning(value interface{}, columns ...string) IImagePackDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imagePackDo) Not(conds ...gen.Condition) IImagePackDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imagePackDo) Or(conds ...gen.Condition) IImagePackDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imagePackDo) Select(conds ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imagePackDo) Where(conds ...gen.Condition) IImagePackDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imagePackDo) Order(conds ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imagePackDo) Distinct(cols ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imagePackDo) Omit(cols ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imagePackDo) Join(table schema.Tabler, on ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imagePackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imagePackDo) RightJoin(table schema.Tabler, on ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imagePackDo) Group(cols ...field.Expr) IImagePackDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imagePackDo) Having(conds ...gen.Condition) IImagePackDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imagePackDo) Limit(limit int) IImagePackDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imagePackDo) Offset(offset int) IImagePackDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imagePackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IImagePackDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imagePackDo) Unscoped() IImagePackDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imagePackDo) Create(values ...*model.ImagePack) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imagePackDo) CreateInBatches(values []*model.ImagePack, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imagePackDo) Save(values ...*model.ImagePack) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imagePackDo) First() (*model.ImagePack, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImagePack), nil
	}
}

func (i imagePackDo) Take() (*model.ImagePack, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImagePack), nil
	}
}

func (i imagePackDo) Last() (*model.ImagePack, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImagePack), nil
	}
}

func (i imagePackDo) Find() ([]*model.ImagePack, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImagePack), err
}

func (i imagePackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImagePack, err error) {
	buf := make([]*model.ImagePack, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imagePackDo) FindInBatches(result *[]*model.ImagePack, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imagePackDo) Attrs(attrs ...field.AssignExpr) IImagePackDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imagePackDo) Assign(attrs ...field.AssignExpr) IImagePackDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imagePackDo) Joins(fields ...field.RelationField) IImagePackDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imagePackDo) Preload(fields ...field.RelationField) IImagePackDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imagePackDo) FirstOrInit() (*model.ImagePack, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImagePack), nil
	}
}

func (i imagePackDo) FirstOrCreate() (*model.ImagePack, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImagePack), nil
	}
}

func (i imagePackDo) FindByPage(offset int, limit int) (result []*model.ImagePack, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imagePackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imagePackDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imagePackDo) Delete(models ...*model.ImagePack) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imagePackDo) withDO(do gen.Dao) *imagePackDo {
	i.DO = *do.(*gen.DO)
	return i
}
