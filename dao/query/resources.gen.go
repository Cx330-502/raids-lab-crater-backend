// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newResource(db *gorm.DB, opts ...gen.DOOption) resource {
	_resource := resource{}

	_resource.resourceDo.UseDB(db, opts...)
	_resource.resourceDo.UseModel(&model.Resource{})

	tableName := _resource.resourceDo.TableName()
	_resource.ALL = field.NewAsterisk(tableName)
	_resource.ID = field.NewUint(tableName, "id")
	_resource.CreatedAt = field.NewTime(tableName, "created_at")
	_resource.UpdatedAt = field.NewTime(tableName, "updated_at")
	_resource.DeletedAt = field.NewField(tableName, "deleted_at")
	_resource.ResourceName = field.NewString(tableName, "resource_name")
	_resource.VendorDomain = field.NewString(tableName, "vendor_domain")
	_resource.ResourceType = field.NewString(tableName, "resource_type")
	_resource.Amount = field.NewInt64(tableName, "amount")
	_resource.AmountSingleMax = field.NewInt64(tableName, "amount_single_max")
	_resource.Format = field.NewString(tableName, "format")
	_resource.Priority = field.NewInt(tableName, "priority")
	_resource.Label = field.NewString(tableName, "label")
	_resource.Type = field.NewString(tableName, "type")
	_resource.Networks = resourceManyToManyNetworks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Networks", "model.Resource"),
		Networks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Networks.Networks", "model.Resource"),
		},
	}

	_resource.fillFieldMap()

	return _resource
}

type resource struct {
	resourceDo resourceDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	ResourceName    field.String // 资源名称
	VendorDomain    field.String // 供应商域名
	ResourceType    field.String // 资源类型
	Amount          field.Int64  // 资源总量
	AmountSingleMax field.Int64  // 单机最大资源量
	Format          field.String // 资源格式
	Priority        field.Int    // 优先级
	Label           field.String // 用于显示的别名
	Type            field.String // 资源类型
	Networks        resourceManyToManyNetworks

	fieldMap map[string]field.Expr
}

func (r resource) Table(newTableName string) *resource {
	r.resourceDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resource) As(alias string) *resource {
	r.resourceDo.DO = *(r.resourceDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resource) updateTableName(table string) *resource {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.ResourceName = field.NewString(table, "resource_name")
	r.VendorDomain = field.NewString(table, "vendor_domain")
	r.ResourceType = field.NewString(table, "resource_type")
	r.Amount = field.NewInt64(table, "amount")
	r.AmountSingleMax = field.NewInt64(table, "amount_single_max")
	r.Format = field.NewString(table, "format")
	r.Priority = field.NewInt(table, "priority")
	r.Label = field.NewString(table, "label")
	r.Type = field.NewString(table, "type")

	r.fillFieldMap()

	return r
}

func (r *resource) WithContext(ctx context.Context) IResourceDo { return r.resourceDo.WithContext(ctx) }

func (r resource) TableName() string { return r.resourceDo.TableName() }

func (r resource) Alias() string { return r.resourceDo.Alias() }

func (r resource) Columns(cols ...field.Expr) gen.Columns { return r.resourceDo.Columns(cols...) }

func (r *resource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resource) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["resource_name"] = r.ResourceName
	r.fieldMap["vendor_domain"] = r.VendorDomain
	r.fieldMap["resource_type"] = r.ResourceType
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["amount_single_max"] = r.AmountSingleMax
	r.fieldMap["format"] = r.Format
	r.fieldMap["priority"] = r.Priority
	r.fieldMap["label"] = r.Label
	r.fieldMap["type"] = r.Type

}

func (r resource) clone(db *gorm.DB) resource {
	r.resourceDo.ReplaceConnPool(db.Statement.ConnPool)
	r.Networks.db = db.Session(&gorm.Session{Initialized: true})
	r.Networks.db.Statement.ConnPool = db.Statement.ConnPool
	return r
}

func (r resource) replaceDB(db *gorm.DB) resource {
	r.resourceDo.ReplaceDB(db)
	r.Networks.db = db.Session(&gorm.Session{})
	return r
}

type resourceManyToManyNetworks struct {
	db *gorm.DB

	field.RelationField

	Networks struct {
		field.RelationField
	}
}

func (a resourceManyToManyNetworks) Where(conds ...field.Expr) *resourceManyToManyNetworks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a resourceManyToManyNetworks) WithContext(ctx context.Context) *resourceManyToManyNetworks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a resourceManyToManyNetworks) Session(session *gorm.Session) *resourceManyToManyNetworks {
	a.db = a.db.Session(session)
	return &a
}

func (a resourceManyToManyNetworks) Model(m *model.Resource) *resourceManyToManyNetworksTx {
	return &resourceManyToManyNetworksTx{a.db.Model(m).Association(a.Name())}
}

func (a resourceManyToManyNetworks) Unscoped() *resourceManyToManyNetworks {
	a.db = a.db.Unscoped()
	return &a
}

type resourceManyToManyNetworksTx struct{ tx *gorm.Association }

func (a resourceManyToManyNetworksTx) Find() (result []*model.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a resourceManyToManyNetworksTx) Append(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a resourceManyToManyNetworksTx) Replace(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a resourceManyToManyNetworksTx) Delete(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a resourceManyToManyNetworksTx) Clear() error {
	return a.tx.Clear()
}

func (a resourceManyToManyNetworksTx) Count() int64 {
	return a.tx.Count()
}

func (a resourceManyToManyNetworksTx) Unscoped() *resourceManyToManyNetworksTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type resourceDo struct{ gen.DO }

type IResourceDo interface {
	gen.SubQuery
	Debug() IResourceDo
	WithContext(ctx context.Context) IResourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IResourceDo
	WriteDB() IResourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IResourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResourceDo
	Not(conds ...gen.Condition) IResourceDo
	Or(conds ...gen.Condition) IResourceDo
	Select(conds ...field.Expr) IResourceDo
	Where(conds ...gen.Condition) IResourceDo
	Order(conds ...field.Expr) IResourceDo
	Distinct(cols ...field.Expr) IResourceDo
	Omit(cols ...field.Expr) IResourceDo
	Join(table schema.Tabler, on ...field.Expr) IResourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResourceDo
	Group(cols ...field.Expr) IResourceDo
	Having(conds ...gen.Condition) IResourceDo
	Limit(limit int) IResourceDo
	Offset(offset int) IResourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceDo
	Unscoped() IResourceDo
	Create(values ...*model.Resource) error
	CreateInBatches(values []*model.Resource, batchSize int) error
	Save(values ...*model.Resource) error
	First() (*model.Resource, error)
	Take() (*model.Resource, error)
	Last() (*model.Resource, error)
	Find() ([]*model.Resource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resource, err error)
	FindInBatches(result *[]*model.Resource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Resource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResourceDo
	Assign(attrs ...field.AssignExpr) IResourceDo
	Joins(fields ...field.RelationField) IResourceDo
	Preload(fields ...field.RelationField) IResourceDo
	FirstOrInit() (*model.Resource, error)
	FirstOrCreate() (*model.Resource, error)
	FindByPage(offset int, limit int) (result []*model.Resource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resourceDo) Debug() IResourceDo {
	return r.withDO(r.DO.Debug())
}

func (r resourceDo) WithContext(ctx context.Context) IResourceDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourceDo) ReadDB() IResourceDo {
	return r.Clauses(dbresolver.Read)
}

func (r resourceDo) WriteDB() IResourceDo {
	return r.Clauses(dbresolver.Write)
}

func (r resourceDo) Session(config *gorm.Session) IResourceDo {
	return r.withDO(r.DO.Session(config))
}

func (r resourceDo) Clauses(conds ...clause.Expression) IResourceDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourceDo) Returning(value interface{}, columns ...string) IResourceDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourceDo) Not(conds ...gen.Condition) IResourceDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourceDo) Or(conds ...gen.Condition) IResourceDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourceDo) Select(conds ...field.Expr) IResourceDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourceDo) Where(conds ...gen.Condition) IResourceDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourceDo) Order(conds ...field.Expr) IResourceDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourceDo) Distinct(cols ...field.Expr) IResourceDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourceDo) Omit(cols ...field.Expr) IResourceDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourceDo) Join(table schema.Tabler, on ...field.Expr) IResourceDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResourceDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourceDo) RightJoin(table schema.Tabler, on ...field.Expr) IResourceDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourceDo) Group(cols ...field.Expr) IResourceDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourceDo) Having(conds ...gen.Condition) IResourceDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourceDo) Limit(limit int) IResourceDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourceDo) Offset(offset int) IResourceDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResourceDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourceDo) Unscoped() IResourceDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourceDo) Create(values ...*model.Resource) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourceDo) CreateInBatches(values []*model.Resource, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourceDo) Save(values ...*model.Resource) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourceDo) First() (*model.Resource, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resource), nil
	}
}

func (r resourceDo) Take() (*model.Resource, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resource), nil
	}
}

func (r resourceDo) Last() (*model.Resource, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resource), nil
	}
}

func (r resourceDo) Find() ([]*model.Resource, error) {
	result, err := r.DO.Find()
	return result.([]*model.Resource), err
}

func (r resourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resource, err error) {
	buf := make([]*model.Resource, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourceDo) FindInBatches(result *[]*model.Resource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourceDo) Attrs(attrs ...field.AssignExpr) IResourceDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourceDo) Assign(attrs ...field.AssignExpr) IResourceDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourceDo) Joins(fields ...field.RelationField) IResourceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourceDo) Preload(fields ...field.RelationField) IResourceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourceDo) FirstOrInit() (*model.Resource, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resource), nil
	}
}

func (r resourceDo) FirstOrCreate() (*model.Resource, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resource), nil
	}
}

func (r resourceDo) FindByPage(offset int, limit int) (result []*model.Resource, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resourceDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resourceDo) Delete(models ...*model.Resource) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resourceDo) withDO(do gen.Dao) *resourceDo {
	r.DO = *do.(*gen.DO)
	return r
}
