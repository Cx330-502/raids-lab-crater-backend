// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newQuota(db *gorm.DB, opts ...gen.DOOption) quota {
	_quota := quota{}

	_quota.quotaDo.UseDB(db, opts...)
	_quota.quotaDo.UseModel(&model.Quota{})

	tableName := _quota.quotaDo.TableName()
	_quota.ALL = field.NewAsterisk(tableName)
	_quota.ID = field.NewUint(tableName, "id")
	_quota.CreatedAt = field.NewTime(tableName, "created_at")
	_quota.UpdatedAt = field.NewTime(tableName, "updated_at")
	_quota.DeletedAt = field.NewField(tableName, "deleted_at")
	_quota.ProjectID = field.NewUint(tableName, "project_id")
	_quota.CPU = field.NewInt(tableName, "cpu")
	_quota.Memory = field.NewInt(tableName, "memory")
	_quota.GPU = field.NewInt(tableName, "gpu")
	_quota.GPUMem = field.NewInt(tableName, "gpu_mem")
	_quota.Storage = field.NewInt(tableName, "storage")
	_quota.Access = field.NewString(tableName, "access")
	_quota.Project = quotaBelongsToProject{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Project", "model.Project"),
		UserProjects: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Project.UserProjects", "model.UserProject"),
		},
		ProjectSpaces: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Project.ProjectSpaces", "model.ProjectSpace"),
		},
	}

	_quota.fillFieldMap()

	return _quota
}

type quota struct {
	quotaDo quotaDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ProjectID field.Uint
	CPU       field.Int
	Memory    field.Int
	GPU       field.Int
	GPUMem    field.Int
	Storage   field.Int
	Access    field.String
	Project   quotaBelongsToProject

	fieldMap map[string]field.Expr
}

func (q quota) Table(newTableName string) *quota {
	q.quotaDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quota) As(alias string) *quota {
	q.quotaDo.DO = *(q.quotaDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quota) updateTableName(table string) *quota {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewUint(table, "id")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")
	q.ProjectID = field.NewUint(table, "project_id")
	q.CPU = field.NewInt(table, "cpu")
	q.Memory = field.NewInt(table, "memory")
	q.GPU = field.NewInt(table, "gpu")
	q.GPUMem = field.NewInt(table, "gpu_mem")
	q.Storage = field.NewInt(table, "storage")
	q.Access = field.NewString(table, "access")

	q.fillFieldMap()

	return q
}

func (q *quota) WithContext(ctx context.Context) IQuotaDo { return q.quotaDo.WithContext(ctx) }

func (q quota) TableName() string { return q.quotaDo.TableName() }

func (q quota) Alias() string { return q.quotaDo.Alias() }

func (q quota) Columns(cols ...field.Expr) gen.Columns { return q.quotaDo.Columns(cols...) }

func (q *quota) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quota) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 12)
	q.fieldMap["id"] = q.ID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt
	q.fieldMap["project_id"] = q.ProjectID
	q.fieldMap["cpu"] = q.CPU
	q.fieldMap["memory"] = q.Memory
	q.fieldMap["gpu"] = q.GPU
	q.fieldMap["gpu_mem"] = q.GPUMem
	q.fieldMap["storage"] = q.Storage
	q.fieldMap["access"] = q.Access

}

func (q quota) clone(db *gorm.DB) quota {
	q.quotaDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quota) replaceDB(db *gorm.DB) quota {
	q.quotaDo.ReplaceDB(db)
	return q
}

type quotaBelongsToProject struct {
	db *gorm.DB

	field.RelationField

	UserProjects struct {
		field.RelationField
	}
	ProjectSpaces struct {
		field.RelationField
	}
}

func (a quotaBelongsToProject) Where(conds ...field.Expr) *quotaBelongsToProject {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a quotaBelongsToProject) WithContext(ctx context.Context) *quotaBelongsToProject {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a quotaBelongsToProject) Session(session *gorm.Session) *quotaBelongsToProject {
	a.db = a.db.Session(session)
	return &a
}

func (a quotaBelongsToProject) Model(m *model.Quota) *quotaBelongsToProjectTx {
	return &quotaBelongsToProjectTx{a.db.Model(m).Association(a.Name())}
}

type quotaBelongsToProjectTx struct{ tx *gorm.Association }

func (a quotaBelongsToProjectTx) Find() (result *model.Project, err error) {
	return result, a.tx.Find(&result)
}

func (a quotaBelongsToProjectTx) Append(values ...*model.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a quotaBelongsToProjectTx) Replace(values ...*model.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a quotaBelongsToProjectTx) Delete(values ...*model.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a quotaBelongsToProjectTx) Clear() error {
	return a.tx.Clear()
}

func (a quotaBelongsToProjectTx) Count() int64 {
	return a.tx.Count()
}

type quotaDo struct{ gen.DO }

type IQuotaDo interface {
	gen.SubQuery
	Debug() IQuotaDo
	WithContext(ctx context.Context) IQuotaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuotaDo
	WriteDB() IQuotaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuotaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuotaDo
	Not(conds ...gen.Condition) IQuotaDo
	Or(conds ...gen.Condition) IQuotaDo
	Select(conds ...field.Expr) IQuotaDo
	Where(conds ...gen.Condition) IQuotaDo
	Order(conds ...field.Expr) IQuotaDo
	Distinct(cols ...field.Expr) IQuotaDo
	Omit(cols ...field.Expr) IQuotaDo
	Join(table schema.Tabler, on ...field.Expr) IQuotaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuotaDo
	Group(cols ...field.Expr) IQuotaDo
	Having(conds ...gen.Condition) IQuotaDo
	Limit(limit int) IQuotaDo
	Offset(offset int) IQuotaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaDo
	Unscoped() IQuotaDo
	Create(values ...*model.Quota) error
	CreateInBatches(values []*model.Quota, batchSize int) error
	Save(values ...*model.Quota) error
	First() (*model.Quota, error)
	Take() (*model.Quota, error)
	Last() (*model.Quota, error)
	Find() ([]*model.Quota, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quota, err error)
	FindInBatches(result *[]*model.Quota, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Quota) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuotaDo
	Assign(attrs ...field.AssignExpr) IQuotaDo
	Joins(fields ...field.RelationField) IQuotaDo
	Preload(fields ...field.RelationField) IQuotaDo
	FirstOrInit() (*model.Quota, error)
	FirstOrCreate() (*model.Quota, error)
	FindByPage(offset int, limit int) (result []*model.Quota, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuotaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quotaDo) Debug() IQuotaDo {
	return q.withDO(q.DO.Debug())
}

func (q quotaDo) WithContext(ctx context.Context) IQuotaDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quotaDo) ReadDB() IQuotaDo {
	return q.Clauses(dbresolver.Read)
}

func (q quotaDo) WriteDB() IQuotaDo {
	return q.Clauses(dbresolver.Write)
}

func (q quotaDo) Session(config *gorm.Session) IQuotaDo {
	return q.withDO(q.DO.Session(config))
}

func (q quotaDo) Clauses(conds ...clause.Expression) IQuotaDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quotaDo) Returning(value interface{}, columns ...string) IQuotaDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quotaDo) Not(conds ...gen.Condition) IQuotaDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quotaDo) Or(conds ...gen.Condition) IQuotaDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quotaDo) Select(conds ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quotaDo) Where(conds ...gen.Condition) IQuotaDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quotaDo) Order(conds ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quotaDo) Distinct(cols ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quotaDo) Omit(cols ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quotaDo) Join(table schema.Tabler, on ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quotaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quotaDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quotaDo) Group(cols ...field.Expr) IQuotaDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quotaDo) Having(conds ...gen.Condition) IQuotaDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quotaDo) Limit(limit int) IQuotaDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quotaDo) Offset(offset int) IQuotaDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quotaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quotaDo) Unscoped() IQuotaDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quotaDo) Create(values ...*model.Quota) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quotaDo) CreateInBatches(values []*model.Quota, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quotaDo) Save(values ...*model.Quota) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quotaDo) First() (*model.Quota, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quota), nil
	}
}

func (q quotaDo) Take() (*model.Quota, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quota), nil
	}
}

func (q quotaDo) Last() (*model.Quota, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quota), nil
	}
}

func (q quotaDo) Find() ([]*model.Quota, error) {
	result, err := q.DO.Find()
	return result.([]*model.Quota), err
}

func (q quotaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quota, err error) {
	buf := make([]*model.Quota, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quotaDo) FindInBatches(result *[]*model.Quota, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quotaDo) Attrs(attrs ...field.AssignExpr) IQuotaDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quotaDo) Assign(attrs ...field.AssignExpr) IQuotaDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quotaDo) Joins(fields ...field.RelationField) IQuotaDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quotaDo) Preload(fields ...field.RelationField) IQuotaDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quotaDo) FirstOrInit() (*model.Quota, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quota), nil
	}
}

func (q quotaDo) FirstOrCreate() (*model.Quota, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quota), nil
	}
}

func (q quotaDo) FindByPage(offset int, limit int) (result []*model.Quota, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quotaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quotaDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quotaDo) Delete(models ...*model.Quota) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quotaDo) withDO(do gen.Dao) *quotaDo {
	q.DO = *do.(*gen.DO)
	return q
}
