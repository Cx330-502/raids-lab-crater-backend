// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Dataset      *dataset
	ImagePack    *imagePack
	ImageUpload  *imageUpload
	Job          *job
	Label        *label
	Queue        *queue
	QueueDataset *queueDataset
	Resource     *resource
	User         *user
	UserDataset  *userDataset
	UserQueue    *userQueue
	Whitelist    *whitelist
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Dataset = &Q.Dataset
	ImagePack = &Q.ImagePack
	ImageUpload = &Q.ImageUpload
	Job = &Q.Job
	Label = &Q.Label
	Queue = &Q.Queue
	QueueDataset = &Q.QueueDataset
	Resource = &Q.Resource
	User = &Q.User
	UserDataset = &Q.UserDataset
	UserQueue = &Q.UserQueue
	Whitelist = &Q.Whitelist
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Dataset:      newDataset(db, opts...),
		ImagePack:    newImagePack(db, opts...),
		ImageUpload:  newImageUpload(db, opts...),
		Job:          newJob(db, opts...),
		Label:        newLabel(db, opts...),
		Queue:        newQueue(db, opts...),
		QueueDataset: newQueueDataset(db, opts...),
		Resource:     newResource(db, opts...),
		User:         newUser(db, opts...),
		UserDataset:  newUserDataset(db, opts...),
		UserQueue:    newUserQueue(db, opts...),
		Whitelist:    newWhitelist(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Dataset      dataset
	ImagePack    imagePack
	ImageUpload  imageUpload
	Job          job
	Label        label
	Queue        queue
	QueueDataset queueDataset
	Resource     resource
	User         user
	UserDataset  userDataset
	UserQueue    userQueue
	Whitelist    whitelist
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Dataset:      q.Dataset.clone(db),
		ImagePack:    q.ImagePack.clone(db),
		ImageUpload:  q.ImageUpload.clone(db),
		Job:          q.Job.clone(db),
		Label:        q.Label.clone(db),
		Queue:        q.Queue.clone(db),
		QueueDataset: q.QueueDataset.clone(db),
		Resource:     q.Resource.clone(db),
		User:         q.User.clone(db),
		UserDataset:  q.UserDataset.clone(db),
		UserQueue:    q.UserQueue.clone(db),
		Whitelist:    q.Whitelist.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Dataset:      q.Dataset.replaceDB(db),
		ImagePack:    q.ImagePack.replaceDB(db),
		ImageUpload:  q.ImageUpload.replaceDB(db),
		Job:          q.Job.replaceDB(db),
		Label:        q.Label.replaceDB(db),
		Queue:        q.Queue.replaceDB(db),
		QueueDataset: q.QueueDataset.replaceDB(db),
		Resource:     q.Resource.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserDataset:  q.UserDataset.replaceDB(db),
		UserQueue:    q.UserQueue.replaceDB(db),
		Whitelist:    q.Whitelist.replaceDB(db),
	}
}

type queryCtx struct {
	Dataset      IDatasetDo
	ImagePack    IImagePackDo
	ImageUpload  IImageUploadDo
	Job          IJobDo
	Label        ILabelDo
	Queue        IQueueDo
	QueueDataset IQueueDatasetDo
	Resource     IResourceDo
	User         IUserDo
	UserDataset  IUserDatasetDo
	UserQueue    IUserQueueDo
	Whitelist    IWhitelistDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Dataset:      q.Dataset.WithContext(ctx),
		ImagePack:    q.ImagePack.WithContext(ctx),
		ImageUpload:  q.ImageUpload.WithContext(ctx),
		Job:          q.Job.WithContext(ctx),
		Label:        q.Label.WithContext(ctx),
		Queue:        q.Queue.WithContext(ctx),
		QueueDataset: q.QueueDataset.WithContext(ctx),
		Resource:     q.Resource.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserDataset:  q.UserDataset.WithContext(ctx),
		UserQueue:    q.UserQueue.WithContext(ctx),
		Whitelist:    q.Whitelist.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
