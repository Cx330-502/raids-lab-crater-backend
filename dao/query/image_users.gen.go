// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/dao/model"
)

func newImageUser(db *gorm.DB, opts ...gen.DOOption) imageUser {
	_imageUser := imageUser{}

	_imageUser.imageUserDo.UseDB(db, opts...)
	_imageUser.imageUserDo.UseModel(&model.ImageUser{})

	tableName := _imageUser.imageUserDo.TableName()
	_imageUser.ALL = field.NewAsterisk(tableName)
	_imageUser.ID = field.NewUint(tableName, "id")
	_imageUser.CreatedAt = field.NewTime(tableName, "created_at")
	_imageUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imageUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_imageUser.ImageID = field.NewUint(tableName, "image_id")
	_imageUser.UserID = field.NewUint(tableName, "user_id")
	_imageUser.Image = imageUserBelongsToImage{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Image", "model.Image"),
		User: struct {
			field.RelationField
			UserAccounts struct {
				field.RelationField
			}
			UserDatasets struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Image.User", "model.User"),
			UserAccounts: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Image.User.UserAccounts", "model.UserAccount"),
			},
			UserDatasets: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Image.User.UserDatasets", "model.UserDataset"),
			},
		},
	}

	_imageUser.User = imageUserBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_imageUser.fillFieldMap()

	return _imageUser
}

type imageUser struct {
	imageUserDo imageUserDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ImageID   field.Uint
	UserID    field.Uint
	Image     imageUserBelongsToImage

	User imageUserBelongsToUser

	fieldMap map[string]field.Expr
}

func (i imageUser) Table(newTableName string) *imageUser {
	i.imageUserDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imageUser) As(alias string) *imageUser {
	i.imageUserDo.DO = *(i.imageUserDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imageUser) updateTableName(table string) *imageUser {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.ImageID = field.NewUint(table, "image_id")
	i.UserID = field.NewUint(table, "user_id")

	i.fillFieldMap()

	return i
}

func (i *imageUser) WithContext(ctx context.Context) IImageUserDo {
	return i.imageUserDo.WithContext(ctx)
}

func (i imageUser) TableName() string { return i.imageUserDo.TableName() }

func (i imageUser) Alias() string { return i.imageUserDo.Alias() }

func (i imageUser) Columns(cols ...field.Expr) gen.Columns { return i.imageUserDo.Columns(cols...) }

func (i *imageUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imageUser) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["image_id"] = i.ImageID
	i.fieldMap["user_id"] = i.UserID

}

func (i imageUser) clone(db *gorm.DB) imageUser {
	i.imageUserDo.ReplaceConnPool(db.Statement.ConnPool)
	i.Image.db = db.Session(&gorm.Session{Initialized: true})
	i.Image.db.Statement.ConnPool = db.Statement.ConnPool
	i.User.db = db.Session(&gorm.Session{Initialized: true})
	i.User.db.Statement.ConnPool = db.Statement.ConnPool
	return i
}

func (i imageUser) replaceDB(db *gorm.DB) imageUser {
	i.imageUserDo.ReplaceDB(db)
	i.Image.db = db.Session(&gorm.Session{})
	i.User.db = db.Session(&gorm.Session{})
	return i
}

type imageUserBelongsToImage struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		UserAccounts struct {
			field.RelationField
		}
		UserDatasets struct {
			field.RelationField
		}
	}
}

func (a imageUserBelongsToImage) Where(conds ...field.Expr) *imageUserBelongsToImage {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a imageUserBelongsToImage) WithContext(ctx context.Context) *imageUserBelongsToImage {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a imageUserBelongsToImage) Session(session *gorm.Session) *imageUserBelongsToImage {
	a.db = a.db.Session(session)
	return &a
}

func (a imageUserBelongsToImage) Model(m *model.ImageUser) *imageUserBelongsToImageTx {
	return &imageUserBelongsToImageTx{a.db.Model(m).Association(a.Name())}
}

func (a imageUserBelongsToImage) Unscoped() *imageUserBelongsToImage {
	a.db = a.db.Unscoped()
	return &a
}

type imageUserBelongsToImageTx struct{ tx *gorm.Association }

func (a imageUserBelongsToImageTx) Find() (result *model.Image, err error) {
	return result, a.tx.Find(&result)
}

func (a imageUserBelongsToImageTx) Append(values ...*model.Image) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a imageUserBelongsToImageTx) Replace(values ...*model.Image) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a imageUserBelongsToImageTx) Delete(values ...*model.Image) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a imageUserBelongsToImageTx) Clear() error {
	return a.tx.Clear()
}

func (a imageUserBelongsToImageTx) Count() int64 {
	return a.tx.Count()
}

func (a imageUserBelongsToImageTx) Unscoped() *imageUserBelongsToImageTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type imageUserBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a imageUserBelongsToUser) Where(conds ...field.Expr) *imageUserBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a imageUserBelongsToUser) WithContext(ctx context.Context) *imageUserBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a imageUserBelongsToUser) Session(session *gorm.Session) *imageUserBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a imageUserBelongsToUser) Model(m *model.ImageUser) *imageUserBelongsToUserTx {
	return &imageUserBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a imageUserBelongsToUser) Unscoped() *imageUserBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type imageUserBelongsToUserTx struct{ tx *gorm.Association }

func (a imageUserBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a imageUserBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a imageUserBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a imageUserBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a imageUserBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a imageUserBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a imageUserBelongsToUserTx) Unscoped() *imageUserBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type imageUserDo struct{ gen.DO }

type IImageUserDo interface {
	gen.SubQuery
	Debug() IImageUserDo
	WithContext(ctx context.Context) IImageUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IImageUserDo
	WriteDB() IImageUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IImageUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IImageUserDo
	Not(conds ...gen.Condition) IImageUserDo
	Or(conds ...gen.Condition) IImageUserDo
	Select(conds ...field.Expr) IImageUserDo
	Where(conds ...gen.Condition) IImageUserDo
	Order(conds ...field.Expr) IImageUserDo
	Distinct(cols ...field.Expr) IImageUserDo
	Omit(cols ...field.Expr) IImageUserDo
	Join(table schema.Tabler, on ...field.Expr) IImageUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IImageUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IImageUserDo
	Group(cols ...field.Expr) IImageUserDo
	Having(conds ...gen.Condition) IImageUserDo
	Limit(limit int) IImageUserDo
	Offset(offset int) IImageUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IImageUserDo
	Unscoped() IImageUserDo
	Create(values ...*model.ImageUser) error
	CreateInBatches(values []*model.ImageUser, batchSize int) error
	Save(values ...*model.ImageUser) error
	First() (*model.ImageUser, error)
	Take() (*model.ImageUser, error)
	Last() (*model.ImageUser, error)
	Find() ([]*model.ImageUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImageUser, err error)
	FindInBatches(result *[]*model.ImageUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ImageUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IImageUserDo
	Assign(attrs ...field.AssignExpr) IImageUserDo
	Joins(fields ...field.RelationField) IImageUserDo
	Preload(fields ...field.RelationField) IImageUserDo
	FirstOrInit() (*model.ImageUser, error)
	FirstOrCreate() (*model.ImageUser, error)
	FindByPage(offset int, limit int) (result []*model.ImageUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IImageUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i imageUserDo) Debug() IImageUserDo {
	return i.withDO(i.DO.Debug())
}

func (i imageUserDo) WithContext(ctx context.Context) IImageUserDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imageUserDo) ReadDB() IImageUserDo {
	return i.Clauses(dbresolver.Read)
}

func (i imageUserDo) WriteDB() IImageUserDo {
	return i.Clauses(dbresolver.Write)
}

func (i imageUserDo) Session(config *gorm.Session) IImageUserDo {
	return i.withDO(i.DO.Session(config))
}

func (i imageUserDo) Clauses(conds ...clause.Expression) IImageUserDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imageUserDo) Returning(value interface{}, columns ...string) IImageUserDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imageUserDo) Not(conds ...gen.Condition) IImageUserDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imageUserDo) Or(conds ...gen.Condition) IImageUserDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imageUserDo) Select(conds ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imageUserDo) Where(conds ...gen.Condition) IImageUserDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imageUserDo) Order(conds ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imageUserDo) Distinct(cols ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imageUserDo) Omit(cols ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imageUserDo) Join(table schema.Tabler, on ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imageUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imageUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imageUserDo) Group(cols ...field.Expr) IImageUserDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imageUserDo) Having(conds ...gen.Condition) IImageUserDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imageUserDo) Limit(limit int) IImageUserDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imageUserDo) Offset(offset int) IImageUserDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imageUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IImageUserDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imageUserDo) Unscoped() IImageUserDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imageUserDo) Create(values ...*model.ImageUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imageUserDo) CreateInBatches(values []*model.ImageUser, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imageUserDo) Save(values ...*model.ImageUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imageUserDo) First() (*model.ImageUser, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUser), nil
	}
}

func (i imageUserDo) Take() (*model.ImageUser, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUser), nil
	}
}

func (i imageUserDo) Last() (*model.ImageUser, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUser), nil
	}
}

func (i imageUserDo) Find() ([]*model.ImageUser, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImageUser), err
}

func (i imageUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImageUser, err error) {
	buf := make([]*model.ImageUser, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imageUserDo) FindInBatches(result *[]*model.ImageUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imageUserDo) Attrs(attrs ...field.AssignExpr) IImageUserDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imageUserDo) Assign(attrs ...field.AssignExpr) IImageUserDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imageUserDo) Joins(fields ...field.RelationField) IImageUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imageUserDo) Preload(fields ...field.RelationField) IImageUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imageUserDo) FirstOrInit() (*model.ImageUser, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUser), nil
	}
}

func (i imageUserDo) FirstOrCreate() (*model.ImageUser, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImageUser), nil
	}
}

func (i imageUserDo) FindByPage(offset int, limit int) (result []*model.ImageUser, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imageUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imageUserDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imageUserDo) Delete(models ...*model.ImageUser) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imageUserDo) withDO(do gen.Dao) *imageUserDo {
	i.DO = *do.(*gen.DO)
	return i
}
