// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/raids-lab/crater/pkg/model"
)

func newAiTask(db *gorm.DB, opts ...gen.DOOption) aiTask {
	_aiTask := aiTask{}

	_aiTask.aiTaskDo.UseDB(db, opts...)
	_aiTask.aiTaskDo.UseModel(&model.AiTask{})

	tableName := _aiTask.aiTaskDo.TableName()
	_aiTask.ALL = field.NewAsterisk(tableName)
	_aiTask.ID = field.NewInt64(tableName, "id")
	_aiTask.TaskName = field.NewString(tableName, "task_name")
	_aiTask.Username = field.NewString(tableName, "username")
	_aiTask.Namespace = field.NewString(tableName, "namespace")
	_aiTask.TaskType = field.NewString(tableName, "task_type")
	_aiTask.CreatedAt = field.NewTime(tableName, "created_at")
	_aiTask.UpdatedAt = field.NewTime(tableName, "updated_at")
	_aiTask.AdmittedAt = field.NewTime(tableName, "admitted_at")
	_aiTask.StartedAt = field.NewTime(tableName, "started_at")
	_aiTask.FinishAt = field.NewTime(tableName, "finish_at")
	_aiTask.Duration = field.NewInt64(tableName, "duration")
	_aiTask.Jct = field.NewInt64(tableName, "jct")
	_aiTask.Image = field.NewString(tableName, "image")
	_aiTask.ResourceRequest = field.NewString(tableName, "resource_request")
	_aiTask.WorkingDir = field.NewString(tableName, "working_dir")
	_aiTask.ShareDirs = field.NewString(tableName, "share_dirs")
	_aiTask.Command = field.NewString(tableName, "command")
	_aiTask.Args = field.NewString(tableName, "args")
	_aiTask.Slo = field.NewInt64(tableName, "slo")
	_aiTask.Status = field.NewString(tableName, "status")
	_aiTask.StatusReason = field.NewString(tableName, "status_reason")
	_aiTask.Jobname = field.NewString(tableName, "jobname")
	_aiTask.IsDeleted = field.NewBool(tableName, "is_deleted")
	_aiTask.ProfileStatus = field.NewInt64(tableName, "profile_status")
	_aiTask.ProfileStat = field.NewString(tableName, "profile_stat")
	_aiTask.EstimatedTime = field.NewInt64(tableName, "estimated_time")
	_aiTask.ScheduleInfo = field.NewString(tableName, "schedule_info")
	_aiTask.Token = field.NewString(tableName, "token")
	_aiTask.NodePort = field.NewInt32(tableName, "node_port")
	_aiTask.SchedulerName = field.NewString(tableName, "scheduler_name")
	_aiTask.GpuModel = field.NewString(tableName, "gpu_model")

	_aiTask.fillFieldMap()

	return _aiTask
}

type aiTask struct {
	aiTaskDo

	ALL             field.Asterisk
	ID              field.Int64
	TaskName        field.String
	Username        field.String
	Namespace       field.String
	TaskType        field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	AdmittedAt      field.Time
	StartedAt       field.Time
	FinishAt        field.Time
	Duration        field.Int64
	Jct             field.Int64
	Image           field.String
	ResourceRequest field.String
	WorkingDir      field.String
	ShareDirs       field.String
	Command         field.String
	Args            field.String
	Slo             field.Int64
	Status          field.String
	StatusReason    field.String
	Jobname         field.String
	IsDeleted       field.Bool
	ProfileStatus   field.Int64
	ProfileStat     field.String
	EstimatedTime   field.Int64
	ScheduleInfo    field.String
	Token           field.String
	NodePort        field.Int32
	SchedulerName   field.String
	GpuModel        field.String

	fieldMap map[string]field.Expr
}

func (a aiTask) Table(newTableName string) *aiTask {
	a.aiTaskDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aiTask) As(alias string) *aiTask {
	a.aiTaskDo.DO = *(a.aiTaskDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aiTask) updateTableName(table string) *aiTask {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.TaskName = field.NewString(table, "task_name")
	a.Username = field.NewString(table, "username")
	a.Namespace = field.NewString(table, "namespace")
	a.TaskType = field.NewString(table, "task_type")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.AdmittedAt = field.NewTime(table, "admitted_at")
	a.StartedAt = field.NewTime(table, "started_at")
	a.FinishAt = field.NewTime(table, "finish_at")
	a.Duration = field.NewInt64(table, "duration")
	a.Jct = field.NewInt64(table, "jct")
	a.Image = field.NewString(table, "image")
	a.ResourceRequest = field.NewString(table, "resource_request")
	a.WorkingDir = field.NewString(table, "working_dir")
	a.ShareDirs = field.NewString(table, "share_dirs")
	a.Command = field.NewString(table, "command")
	a.Args = field.NewString(table, "args")
	a.Slo = field.NewInt64(table, "slo")
	a.Status = field.NewString(table, "status")
	a.StatusReason = field.NewString(table, "status_reason")
	a.Jobname = field.NewString(table, "jobname")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.ProfileStatus = field.NewInt64(table, "profile_status")
	a.ProfileStat = field.NewString(table, "profile_stat")
	a.EstimatedTime = field.NewInt64(table, "estimated_time")
	a.ScheduleInfo = field.NewString(table, "schedule_info")
	a.Token = field.NewString(table, "token")
	a.NodePort = field.NewInt32(table, "node_port")
	a.SchedulerName = field.NewString(table, "scheduler_name")
	a.GpuModel = field.NewString(table, "gpu_model")

	a.fillFieldMap()

	return a
}

func (a *aiTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aiTask) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 31)
	a.fieldMap["id"] = a.ID
	a.fieldMap["task_name"] = a.TaskName
	a.fieldMap["username"] = a.Username
	a.fieldMap["namespace"] = a.Namespace
	a.fieldMap["task_type"] = a.TaskType
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["admitted_at"] = a.AdmittedAt
	a.fieldMap["started_at"] = a.StartedAt
	a.fieldMap["finish_at"] = a.FinishAt
	a.fieldMap["duration"] = a.Duration
	a.fieldMap["jct"] = a.Jct
	a.fieldMap["image"] = a.Image
	a.fieldMap["resource_request"] = a.ResourceRequest
	a.fieldMap["working_dir"] = a.WorkingDir
	a.fieldMap["share_dirs"] = a.ShareDirs
	a.fieldMap["command"] = a.Command
	a.fieldMap["args"] = a.Args
	a.fieldMap["slo"] = a.Slo
	a.fieldMap["status"] = a.Status
	a.fieldMap["status_reason"] = a.StatusReason
	a.fieldMap["jobname"] = a.Jobname
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["profile_status"] = a.ProfileStatus
	a.fieldMap["profile_stat"] = a.ProfileStat
	a.fieldMap["estimated_time"] = a.EstimatedTime
	a.fieldMap["schedule_info"] = a.ScheduleInfo
	a.fieldMap["token"] = a.Token
	a.fieldMap["node_port"] = a.NodePort
	a.fieldMap["scheduler_name"] = a.SchedulerName
	a.fieldMap["gpu_model"] = a.GpuModel
}

func (a aiTask) clone(db *gorm.DB) aiTask {
	a.aiTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aiTask) replaceDB(db *gorm.DB) aiTask {
	a.aiTaskDo.ReplaceDB(db)
	return a
}

type aiTaskDo struct{ gen.DO }

type IAiTaskDo interface {
	gen.SubQuery
	Debug() IAiTaskDo
	WithContext(ctx context.Context) IAiTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAiTaskDo
	WriteDB() IAiTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAiTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAiTaskDo
	Not(conds ...gen.Condition) IAiTaskDo
	Or(conds ...gen.Condition) IAiTaskDo
	Select(conds ...field.Expr) IAiTaskDo
	Where(conds ...gen.Condition) IAiTaskDo
	Order(conds ...field.Expr) IAiTaskDo
	Distinct(cols ...field.Expr) IAiTaskDo
	Omit(cols ...field.Expr) IAiTaskDo
	Join(table schema.Tabler, on ...field.Expr) IAiTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAiTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAiTaskDo
	Group(cols ...field.Expr) IAiTaskDo
	Having(conds ...gen.Condition) IAiTaskDo
	Limit(limit int) IAiTaskDo
	Offset(offset int) IAiTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAiTaskDo
	Unscoped() IAiTaskDo
	Create(values ...*model.AiTask) error
	CreateInBatches(values []*model.AiTask, batchSize int) error
	Save(values ...*model.AiTask) error
	First() (*model.AiTask, error)
	Take() (*model.AiTask, error)
	Last() (*model.AiTask, error)
	Find() ([]*model.AiTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AiTask, err error)
	FindInBatches(result *[]*model.AiTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AiTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAiTaskDo
	Assign(attrs ...field.AssignExpr) IAiTaskDo
	Joins(fields ...field.RelationField) IAiTaskDo
	Preload(fields ...field.RelationField) IAiTaskDo
	FirstOrInit() (*model.AiTask, error)
	FirstOrCreate() (*model.AiTask, error)
	FindByPage(offset int, limit int) (result []*model.AiTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAiTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aiTaskDo) Debug() IAiTaskDo {
	return a.withDO(a.DO.Debug())
}

func (a aiTaskDo) WithContext(ctx context.Context) IAiTaskDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aiTaskDo) ReadDB() IAiTaskDo {
	return a.Clauses(dbresolver.Read)
}

func (a aiTaskDo) WriteDB() IAiTaskDo {
	return a.Clauses(dbresolver.Write)
}

func (a aiTaskDo) Session(config *gorm.Session) IAiTaskDo {
	return a.withDO(a.DO.Session(config))
}

func (a aiTaskDo) Clauses(conds ...clause.Expression) IAiTaskDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aiTaskDo) Returning(value interface{}, columns ...string) IAiTaskDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aiTaskDo) Not(conds ...gen.Condition) IAiTaskDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aiTaskDo) Or(conds ...gen.Condition) IAiTaskDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aiTaskDo) Select(conds ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aiTaskDo) Where(conds ...gen.Condition) IAiTaskDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aiTaskDo) Order(conds ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aiTaskDo) Distinct(cols ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aiTaskDo) Omit(cols ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aiTaskDo) Join(table schema.Tabler, on ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aiTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aiTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aiTaskDo) Group(cols ...field.Expr) IAiTaskDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aiTaskDo) Having(conds ...gen.Condition) IAiTaskDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aiTaskDo) Limit(limit int) IAiTaskDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aiTaskDo) Offset(offset int) IAiTaskDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aiTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAiTaskDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aiTaskDo) Unscoped() IAiTaskDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aiTaskDo) Create(values ...*model.AiTask) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aiTaskDo) CreateInBatches(values []*model.AiTask, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aiTaskDo) Save(values ...*model.AiTask) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aiTaskDo) First() (*model.AiTask, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiTask), nil
	}
}

func (a aiTaskDo) Take() (*model.AiTask, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiTask), nil
	}
}

func (a aiTaskDo) Last() (*model.AiTask, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiTask), nil
	}
}

func (a aiTaskDo) Find() ([]*model.AiTask, error) {
	result, err := a.DO.Find()
	return result.([]*model.AiTask), err
}

func (a aiTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AiTask, err error) {
	buf := make([]*model.AiTask, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aiTaskDo) FindInBatches(result *[]*model.AiTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aiTaskDo) Attrs(attrs ...field.AssignExpr) IAiTaskDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aiTaskDo) Assign(attrs ...field.AssignExpr) IAiTaskDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aiTaskDo) Joins(fields ...field.RelationField) IAiTaskDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aiTaskDo) Preload(fields ...field.RelationField) IAiTaskDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aiTaskDo) FirstOrInit() (*model.AiTask, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiTask), nil
	}
}

func (a aiTaskDo) FirstOrCreate() (*model.AiTask, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AiTask), nil
	}
}

func (a aiTaskDo) FindByPage(offset int, limit int) (result []*model.AiTask, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aiTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aiTaskDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aiTaskDo) Delete(models ...*model.AiTask) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aiTaskDo) withDO(do gen.Dao) *aiTaskDo {
	a.DO = *do.(*gen.DO)
	return a
}
