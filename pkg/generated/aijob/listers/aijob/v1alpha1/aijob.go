/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/ai-task-controller/pkg/apis/aijob/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AIJobLister helps list AIJobs.
// All objects returned here must be treated as read-only.
type AIJobLister interface {
	// List lists all AIJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AIJob, err error)
	// AIJobs returns an object that can list and get AIJobs.
	AIJobs(namespace string) AIJobNamespaceLister
	AIJobListerExpansion
}

// aIJobLister implements the AIJobLister interface.
type aIJobLister struct {
	indexer cache.Indexer
}

// NewAIJobLister returns a new AIJobLister.
func NewAIJobLister(indexer cache.Indexer) AIJobLister {
	return &aIJobLister{indexer: indexer}
}

// List lists all AIJobs in the indexer.
func (s *aIJobLister) List(selector labels.Selector) (ret []*v1alpha1.AIJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AIJob))
	})
	return ret, err
}

// AIJobs returns an object that can list and get AIJobs.
func (s *aIJobLister) AIJobs(namespace string) AIJobNamespaceLister {
	return aIJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AIJobNamespaceLister helps list and get AIJobs.
// All objects returned here must be treated as read-only.
type AIJobNamespaceLister interface {
	// List lists all AIJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AIJob, err error)
	// Get retrieves the AIJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AIJob, error)
	AIJobNamespaceListerExpansion
}

// aIJobNamespaceLister implements the AIJobNamespaceLister
// interface.
type aIJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AIJobs in the indexer for a given namespace.
func (s aIJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AIJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AIJob))
	})
	return ret, err
}

// Get retrieves the AIJob from the indexer for a given namespace and name.
func (s aIJobNamespaceLister) Get(name string) (*v1alpha1.AIJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aijob"), name)
	}
	return obj.(*v1alpha1.AIJob), nil
}
