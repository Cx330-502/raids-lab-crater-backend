/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/ai-task-controller/pkg/apis/tenantquota/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TenantQuotaLister helps list TenantQuotas.
// All objects returned here must be treated as read-only.
type TenantQuotaLister interface {
	// List lists all TenantQuotas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TenantQuota, err error)
	// TenantQuotas returns an object that can list and get TenantQuotas.
	TenantQuotas(namespace string) TenantQuotaNamespaceLister
	TenantQuotaListerExpansion
}

// tenantQuotaLister implements the TenantQuotaLister interface.
type tenantQuotaLister struct {
	indexer cache.Indexer
}

// NewTenantQuotaLister returns a new TenantQuotaLister.
func NewTenantQuotaLister(indexer cache.Indexer) TenantQuotaLister {
	return &tenantQuotaLister{indexer: indexer}
}

// List lists all TenantQuotas in the indexer.
func (s *tenantQuotaLister) List(selector labels.Selector) (ret []*v1alpha1.TenantQuota, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TenantQuota))
	})
	return ret, err
}

// TenantQuotas returns an object that can list and get TenantQuotas.
func (s *tenantQuotaLister) TenantQuotas(namespace string) TenantQuotaNamespaceLister {
	return tenantQuotaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TenantQuotaNamespaceLister helps list and get TenantQuotas.
// All objects returned here must be treated as read-only.
type TenantQuotaNamespaceLister interface {
	// List lists all TenantQuotas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TenantQuota, err error)
	// Get retrieves the TenantQuota from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TenantQuota, error)
	TenantQuotaNamespaceListerExpansion
}

// tenantQuotaNamespaceLister implements the TenantQuotaNamespaceLister
// interface.
type tenantQuotaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TenantQuotas in the indexer for a given namespace.
func (s tenantQuotaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TenantQuota, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TenantQuota))
	})
	return ret, err
}

// Get retrieves the TenantQuota from the indexer for a given namespace and name.
func (s tenantQuotaNamespaceLister) Get(name string) (*v1alpha1.TenantQuota, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tenantquota"), name)
	}
	return obj.(*v1alpha1.TenantQuota), nil
}
