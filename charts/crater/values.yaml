web:
  backend:
    image:
      repository: ***REMOVED***
      tag: "1236680e"
      pullPolicy: "IfNotPresent"
  frontend:
    image:
      repository: ***REMOVED***
      tag: "73bfde5a"
      pullPolicy: "IfNotPresent"
  storage:
    image:
      repository: ***REMOVED***
      tag: "jg5s886d"
      pullPolicy: "IfNotPresent"
  ingress:
    host: ***REMOVED***

nodeSelector:
  node-role.kubernetes.io/control-plane: ""

tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule

backendConfig:
  content: |
    enableLeaderElection: false
    leaderElectionID: ***REMOVED***
    enableProfiling: true
    prometheusAPI: ***REMOVED***
    profilingTimeout: 120
    serverAddr: :8088
    metricsAddr: :8080
    probeAddr: :8081
    monitoringPort: 9443
    host: ***REMOVED***
    postgres:
      host: ***REMOVED***
      port: 5432
      dbname: crater
      user: crater
      password: ***REMOVED***
      sslmode: disable
      TimeZone: Asia/Shanghai
    workspace:
      namespace: crater-workspace
      pvcName: crater-storage
      ingressName: crater-jobs-ingress
      imageNameSpace: crater-images
    act:
      strictRegisterMode: true
      uidServerURL: ***REMOVED***
      image:
        registryServer: ***REMOVED***
        registryUser: ***REMOVED***
        registryPass: ***REMOVED***
        registryProject: crater
      openAPI:
        url: ***REMOVED***
        chameleonKey: ***REMOVED***
        accessToken: ***REMOVED***
      auth:
        userName: ***REMOVED***
        password: ***REMOVED***
        address: ***REMOVED***
        searchDN: OU=Lab,OU=ACT,DC=lab,DC=act,DC=buaa,Dc=edu,DC=cn
      smtp:
        host: ***REMOVED***
        port: 25
        user: notify
        password: ***REMOVED***

ssConfig:
  content: |
    postgres:
      host: ***REMOVED***
      port: 5432
      dbname: crater
      user: crater
      password: ***REMOVED***
      sslmode: disable
      TimeZone: Asia/Shanghai

# Usage:
# helm install crater ./charts/crater \
# --set-string tls.cert="$(cat path/to/tls.crt)"\
# --set-string tls.key="$(cat path/to/tls.key)"
tls:
  cert: "===hdgddh==="
  key: "==="

storage:
  create: false
  request: 2Ti
  storageClass: "nfs-client"
