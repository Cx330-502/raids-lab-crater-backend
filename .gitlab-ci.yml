stages:
  - test
  - build_backend
  - build_image
  - deploy

variables:
  HARBOR_REGISTRY_IMAGE: ***REMOVED***/crater/web-backend

# https://docs.gitlab.com/ee/development/go_guide/#automatic-linting
lint:
  image: ***REMOVED***/crater/golangci-lint:v1.57.1
  stage: test
  script:
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - go env -w GO111MODULE=on
    - go env -w GOPROXY=https://goproxy.cn,direct
    - go mod download
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in: 1 week
  cache:
    paths:
      - .cache

# Build backend and generate artifacts
build_backend:
  stage: build_backend
  image: ***REMOVED***/crater/golang:1.22-alpine
  script:
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - go env -w GO111MODULE=on
    - go env -w GOPROXY=https://goproxy.cn,direct
    - go mod download
    - go build -o bin/controller main.go
  artifacts:
    paths:
      - bin/controller
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_TAG
  cache:
    paths:
      - .cache

# Build Docker image and push to harbor registry
build_image:
  stage: build_image
  image:
    name: ***REMOVED***/crater/kaniko-executor:debug
    entrypoint: [""]
  script:
    # Since GitLab container registry is not enabled, we need to set up harbor registry manually.
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${HARBOR_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${HARBOR_REGISTRY_USER}" "${HARBOR_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - build_backend

# Deploy to Kubernetes cluster
deploy:
  stage: deploy
  image:
    name: ***REMOVED***/crater/bitnami-kubectl:240302
    entrypoint: [""]
  script:
    - kubectl config use-context raids/resource-scheduling/crater/web-frontend:crater-cluster
    - kubectl set image deployment/crater-web-backend crater-web-backend-container=${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_TAG} -n crater
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - build_image
