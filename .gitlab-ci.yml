stages:
  - test
  - build
  - build_image
  - deploy

variables:
  HARBOR_REGISTRY_IMAGE: "${HARBOR_REGISTRY}/crater/web-backend"
  GO_CACHE_DIR: "${CI_PROJECT_DIR}/.go_cache"
  BIN_DIR: "${CI_PROJECT_DIR}/bin"

# 使用共享的Go环境准备
.setup_go: &setup_go
  before_script:
    - mkdir -p "${GO_CACHE_DIR}" "${BIN_DIR}"
    - export GOPATH="${GO_CACHE_DIR}"
    - export PATH="${GOPATH}/bin:${PATH}"
    - go env -w GO111MODULE=on
    - go env -w GOPROXY=https://goproxy.cn,direct
    - go mod download

# 自动代码质量检查
lint:
  image: ***REMOVED***/crater/golangci/golangci-lint:v1.61.0
  stage: test
  <<: *setup_go
  script:
    - command -v swag >/dev/null || go install github.com/swaggo/swag/cmd/swag@latest
    - swag init
    - golangci-lint run --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in: 1 week
  cache:
    key: go-mod-cache
    paths:
      - "${GO_CACHE_DIR}"

# 合并构建作业 - 同时生成迁移工具和后端服务
build_binaries:
  stage: build
  image: ***REMOVED***/docker.io/library/golang:1.23-alpine
  <<: *setup_go
  script:
    - command -v swag >/dev/null || go install github.com/swaggo/swag/cmd/swag@latest
    - swag init
    - go build -ldflags="-w -s" -o "${BIN_DIR}/migrate" cmd/gorm-gen/models/migrate.go
    - go build -ldflags="-w -s" -o "${BIN_DIR}/controller" main.go
  artifacts:
    paths:
      - "${BIN_DIR}"
    expire_in: 1 hour
  only:
    - main
  cache:
    key: go-mod-cache
    paths:
      - "${GO_CACHE_DIR}"

# 构建并推送Docker镜像
build_image:
  stage: build_image
  image:
    name: ***REMOVED***/crater/kaniko-executor:debug
    entrypoint: [""]
  needs: ["build_binaries"]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${HARBOR_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${HARBOR_REGISTRY_USER}" "${HARBOR_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target "backend"
      --destination "${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  only:
    - main

# 部署到测试集群
deploy:
  stage: deploy
  image:
    name: ***REMOVED***/crater/bitnami-kubectl:240302
    entrypoint: [""]
  needs: ["build_image"]
  script:
    - kubectl config use-context raids/resource-scheduling/crater/web-frontend:crater-cluster
    - kubectl set image deployment/crater-web-backend crater-web-backend-container=${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} -n crater
  only:
    - main

# 部署到生产集群
deploy-release:
  stage: deploy
  image:
    name: ***REMOVED***/crater/bitnami-kubectl:240302
    entrypoint: [""]
  needs: ["build_image"]
  script:
    - kubectl config use-context raids/resource-scheduling/crater/web-frontend:actgpu-cluster
    - kubectl set image deployment/crater-web-backend crater-web-backend-container=${HARBOR_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} -n crater
  only:
    - main
