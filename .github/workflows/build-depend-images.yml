# Copyright 2025 RAIDS Lab
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Push Dependency Images

on:
  push:
    branches: [main]
    paths:
      - 'hack/depend-image-dockerfile/**'
  pull_request:
    branches: [main]
    paths:
      - 'hack/depend-image-dockerfile/**'

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: raids-lab/crater

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      buildx-frontend: ${{ steps.changes.outputs.buildx-frontend }}
      envd-frontend: ${{ steps.changes.outputs.envd-frontend }}
      nerdctl: ${{ steps.changes.outputs.nerdctl }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            buildx-frontend:
              - 'hack/depend-image-dockerfile/buildx-frontend/**'
            envd-frontend:
              - 'hack/depend-image-dockerfile/envd-frontend/**'
            nerdctl:
              - 'hack/depend-image-dockerfile/nerdctl/**'

  build-buildx-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.buildx-frontend == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta for buildx-frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-buildx-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push buildx-frontend image
        uses: docker/build-push-action@v6
        with:
          context: hack/depend-image-dockerfile/buildx-frontend
          file: hack/depend-image-dockerfile/buildx-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-envd-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.envd-frontend == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta for envd-frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-envd-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push envd-frontend image
        uses: docker/build-push-action@v6
        with:
          context: hack/depend-image-dockerfile/envd-frontend
          file: hack/depend-image-dockerfile/envd-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-nerdctl:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.nerdctl == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta for nerdctl
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-nerdctl
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push nerdctl image
        uses: docker/build-push-action@v6
        with:
          context: hack/depend-image-dockerfile/nerdctl
          file: hack/depend-image-dockerfile/nerdctl/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-buildx-frontend, build-envd-frontend, build-nerdctl]
    if: always() && (needs.build-buildx-frontend.result == 'success' || needs.build-envd-frontend.result == 'success' || needs.build-nerdctl.result == 'success')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clean up old images
        uses: quartx-analytics/ghcr-cleaner@v1
        with:
          owner-type: org
          token: ${{ secrets.PAT_TOKEN }}
          repository-owner: ${{ github.repository_owner }}
          package-name: crater-buildx-frontend
          delete-untagged: true
          keep-at-most: 5
          skip-tags: latest
        continue-on-error: true

      - name: Clean up old envd-frontend images
        uses: quartx-analytics/ghcr-cleaner@v1
        with:
          owner-type: org
          token: ${{ secrets.PAT_TOKEN }}
          repository-owner: ${{ github.repository_owner }}
          package-name: crater-envd-frontend
          delete-untagged: true
          keep-at-most: 5
          skip-tags: latest
        continue-on-error: true

      - name: Clean up old nerdctl images
        uses: quartx-analytics/ghcr-cleaner@v1
        with:
          owner-type: org
          token: ${{ secrets.PAT_TOKEN }}
          repository-owner: ${{ github.repository_owner }}
          package-name: crater-nerdctl
          delete-untagged: true
          keep-at-most: 5
          skip-tags: latest
        continue-on-error: true
